/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 8658.0, "series": [{"data": [[0.0, 2016.0], [0.1, 2016.0], [0.2, 2016.0], [0.3, 2016.0], [0.4, 2016.0], [0.5, 2062.0], [0.6, 2062.0], [0.7, 2062.0], [0.8, 2062.0], [0.9, 2062.0], [1.0, 2304.0], [1.1, 2304.0], [1.2, 2304.0], [1.3, 2304.0], [1.4, 2304.0], [1.5, 2310.0], [1.6, 2310.0], [1.7, 2310.0], [1.8, 2310.0], [1.9, 2310.0], [2.0, 2325.0], [2.1, 2325.0], [2.2, 2325.0], [2.3, 2325.0], [2.4, 2325.0], [2.5, 2378.0], [2.6, 2378.0], [2.7, 2378.0], [2.8, 2378.0], [2.9, 2378.0], [3.0, 2441.0], [3.1, 2441.0], [3.2, 2441.0], [3.3, 2441.0], [3.4, 2441.0], [3.5, 2459.0], [3.6, 2459.0], [3.7, 2459.0], [3.8, 2459.0], [3.9, 2459.0], [4.0, 2470.0], [4.1, 2470.0], [4.2, 2470.0], [4.3, 2470.0], [4.4, 2470.0], [4.5, 2476.0], [4.6, 2476.0], [4.7, 2476.0], [4.8, 2476.0], [4.9, 2476.0], [5.0, 2476.0], [5.1, 2476.0], [5.2, 2476.0], [5.3, 2476.0], [5.4, 2476.0], [5.5, 2480.0], [5.6, 2480.0], [5.7, 2480.0], [5.8, 2480.0], [5.9, 2480.0], [6.0, 2482.0], [6.1, 2482.0], [6.2, 2482.0], [6.3, 2482.0], [6.4, 2482.0], [6.5, 2483.0], [6.6, 2483.0], [6.7, 2483.0], [6.8, 2483.0], [6.9, 2483.0], [7.0, 2488.0], [7.1, 2488.0], [7.2, 2488.0], [7.3, 2488.0], [7.4, 2488.0], [7.5, 2489.0], [7.6, 2489.0], [7.7, 2489.0], [7.8, 2489.0], [7.9, 2489.0], [8.0, 2489.0], [8.1, 2489.0], [8.2, 2489.0], [8.3, 2489.0], [8.4, 2489.0], [8.5, 2492.0], [8.6, 2492.0], [8.7, 2492.0], [8.8, 2492.0], [8.9, 2492.0], [9.0, 2492.0], [9.1, 2492.0], [9.2, 2492.0], [9.3, 2492.0], [9.4, 2492.0], [9.5, 2494.0], [9.6, 2494.0], [9.7, 2494.0], [9.8, 2494.0], [9.9, 2494.0], [10.0, 2503.0], [10.1, 2503.0], [10.2, 2503.0], [10.3, 2503.0], [10.4, 2503.0], [10.5, 2504.0], [10.6, 2504.0], [10.7, 2504.0], [10.8, 2504.0], [10.9, 2504.0], [11.0, 2505.0], [11.1, 2505.0], [11.2, 2505.0], [11.3, 2505.0], [11.4, 2505.0], [11.5, 2506.0], [11.6, 2506.0], [11.7, 2506.0], [11.8, 2506.0], [11.9, 2506.0], [12.0, 2506.0], [12.1, 2506.0], [12.2, 2506.0], [12.3, 2506.0], [12.4, 2506.0], [12.5, 2508.0], [12.6, 2508.0], [12.7, 2508.0], [12.8, 2508.0], [12.9, 2508.0], [13.0, 2508.0], [13.1, 2508.0], [13.2, 2508.0], [13.3, 2508.0], [13.4, 2508.0], [13.5, 2508.0], [13.6, 2508.0], [13.7, 2508.0], [13.8, 2508.0], [13.9, 2508.0], [14.0, 2511.0], [14.1, 2511.0], [14.2, 2511.0], [14.3, 2511.0], [14.4, 2511.0], [14.5, 2513.0], [14.6, 2513.0], [14.7, 2513.0], [14.8, 2513.0], [14.9, 2513.0], [15.0, 2513.0], [15.1, 2513.0], [15.2, 2513.0], [15.3, 2513.0], [15.4, 2513.0], [15.5, 2513.0], [15.6, 2513.0], [15.7, 2513.0], [15.8, 2513.0], [15.9, 2513.0], [16.0, 2532.0], [16.1, 2532.0], [16.2, 2532.0], [16.3, 2532.0], [16.4, 2532.0], [16.5, 2533.0], [16.6, 2533.0], [16.7, 2533.0], [16.8, 2533.0], [16.9, 2533.0], [17.0, 2539.0], [17.1, 2539.0], [17.2, 2539.0], [17.3, 2539.0], [17.4, 2539.0], [17.5, 2542.0], [17.6, 2542.0], [17.7, 2542.0], [17.8, 2542.0], [17.9, 2542.0], [18.0, 2549.0], [18.1, 2549.0], [18.2, 2549.0], [18.3, 2549.0], [18.4, 2549.0], [18.5, 2560.0], [18.6, 2560.0], [18.7, 2560.0], [18.8, 2560.0], [18.9, 2560.0], [19.0, 2563.0], [19.1, 2563.0], [19.2, 2563.0], [19.3, 2563.0], [19.4, 2563.0], [19.5, 2572.0], [19.6, 2572.0], [19.7, 2572.0], [19.8, 2572.0], [19.9, 2572.0], [20.0, 2573.0], [20.1, 2573.0], [20.2, 2573.0], [20.3, 2573.0], [20.4, 2573.0], [20.5, 2577.0], [20.6, 2577.0], [20.7, 2577.0], [20.8, 2577.0], [20.9, 2577.0], [21.0, 2580.0], [21.1, 2580.0], [21.2, 2580.0], [21.3, 2580.0], [21.4, 2580.0], [21.5, 2582.0], [21.6, 2582.0], [21.7, 2582.0], [21.8, 2582.0], [21.9, 2582.0], [22.0, 2584.0], [22.1, 2584.0], [22.2, 2584.0], [22.3, 2584.0], [22.4, 2584.0], [22.5, 2585.0], [22.6, 2585.0], [22.7, 2585.0], [22.8, 2585.0], [22.9, 2585.0], [23.0, 2589.0], [23.1, 2589.0], [23.2, 2589.0], [23.3, 2589.0], [23.4, 2589.0], [23.5, 2589.0], [23.6, 2589.0], [23.7, 2589.0], [23.8, 2589.0], [23.9, 2589.0], [24.0, 2597.0], [24.1, 2597.0], [24.2, 2597.0], [24.3, 2597.0], [24.4, 2597.0], [24.5, 2598.0], [24.6, 2598.0], [24.7, 2598.0], [24.8, 2598.0], [24.9, 2598.0], [25.0, 2603.0], [25.1, 2603.0], [25.2, 2603.0], [25.3, 2603.0], [25.4, 2603.0], [25.5, 2607.0], [25.6, 2607.0], [25.7, 2607.0], [25.8, 2607.0], [25.9, 2607.0], [26.0, 2610.0], [26.1, 2610.0], [26.2, 2610.0], [26.3, 2610.0], [26.4, 2610.0], [26.5, 2613.0], [26.6, 2613.0], [26.7, 2613.0], [26.8, 2613.0], [26.9, 2613.0], [27.0, 2620.0], [27.1, 2620.0], [27.2, 2620.0], [27.3, 2620.0], [27.4, 2620.0], [27.5, 2622.0], [27.6, 2622.0], [27.7, 2622.0], [27.8, 2622.0], [27.9, 2622.0], [28.0, 2622.0], [28.1, 2622.0], [28.2, 2622.0], [28.3, 2622.0], [28.4, 2622.0], [28.5, 2623.0], [28.6, 2623.0], [28.7, 2623.0], [28.8, 2623.0], [28.9, 2623.0], [29.0, 2629.0], [29.1, 2629.0], [29.2, 2629.0], [29.3, 2629.0], [29.4, 2629.0], [29.5, 2633.0], [29.6, 2633.0], [29.7, 2633.0], [29.8, 2633.0], [29.9, 2633.0], [30.0, 2634.0], [30.1, 2634.0], [30.2, 2634.0], [30.3, 2634.0], [30.4, 2634.0], [30.5, 2635.0], [30.6, 2635.0], [30.7, 2635.0], [30.8, 2635.0], [30.9, 2635.0], [31.0, 2637.0], [31.1, 2637.0], [31.2, 2637.0], [31.3, 2637.0], [31.4, 2637.0], [31.5, 2642.0], [31.6, 2642.0], [31.7, 2642.0], [31.8, 2642.0], [31.9, 2642.0], [32.0, 2656.0], [32.1, 2656.0], [32.2, 2656.0], [32.3, 2656.0], [32.4, 2656.0], [32.5, 2663.0], [32.6, 2663.0], [32.7, 2663.0], [32.8, 2663.0], [32.9, 2663.0], [33.0, 2665.0], [33.1, 2665.0], [33.2, 2665.0], [33.3, 2665.0], [33.4, 2665.0], [33.5, 2666.0], [33.6, 2666.0], [33.7, 2666.0], [33.8, 2666.0], [33.9, 2666.0], [34.0, 2667.0], [34.1, 2667.0], [34.2, 2667.0], [34.3, 2667.0], [34.4, 2667.0], [34.5, 2668.0], [34.6, 2668.0], [34.7, 2668.0], [34.8, 2668.0], [34.9, 2668.0], [35.0, 2669.0], [35.1, 2669.0], [35.2, 2669.0], [35.3, 2669.0], [35.4, 2669.0], [35.5, 2672.0], [35.6, 2672.0], [35.7, 2672.0], [35.8, 2672.0], [35.9, 2672.0], [36.0, 2678.0], [36.1, 2678.0], [36.2, 2678.0], [36.3, 2678.0], [36.4, 2678.0], [36.5, 2687.0], [36.6, 2687.0], [36.7, 2687.0], [36.8, 2687.0], [36.9, 2687.0], [37.0, 2688.0], [37.1, 2688.0], [37.2, 2688.0], [37.3, 2688.0], [37.4, 2688.0], [37.5, 2692.0], [37.6, 2692.0], [37.7, 2692.0], [37.8, 2692.0], [37.9, 2692.0], [38.0, 2698.0], [38.1, 2698.0], [38.2, 2698.0], [38.3, 2698.0], [38.4, 2698.0], [38.5, 2699.0], [38.6, 2699.0], [38.7, 2699.0], [38.8, 2699.0], [38.9, 2699.0], [39.0, 2704.0], [39.1, 2704.0], [39.2, 2704.0], [39.3, 2704.0], [39.4, 2704.0], [39.5, 2706.0], [39.6, 2706.0], [39.7, 2706.0], [39.8, 2706.0], [39.9, 2706.0], [40.0, 2708.0], [40.1, 2708.0], [40.2, 2708.0], [40.3, 2708.0], [40.4, 2708.0], [40.5, 2711.0], [40.6, 2711.0], [40.7, 2711.0], [40.8, 2711.0], [40.9, 2711.0], [41.0, 2711.0], [41.1, 2711.0], [41.2, 2711.0], [41.3, 2711.0], [41.4, 2711.0], [41.5, 2712.0], [41.6, 2712.0], [41.7, 2712.0], [41.8, 2712.0], [41.9, 2712.0], [42.0, 2712.0], [42.1, 2712.0], [42.2, 2712.0], [42.3, 2712.0], [42.4, 2712.0], [42.5, 2717.0], [42.6, 2717.0], [42.7, 2717.0], [42.8, 2717.0], [42.9, 2717.0], [43.0, 2717.0], [43.1, 2717.0], [43.2, 2717.0], [43.3, 2717.0], [43.4, 2717.0], [43.5, 2720.0], [43.6, 2720.0], [43.7, 2720.0], [43.8, 2720.0], [43.9, 2720.0], [44.0, 2731.0], [44.1, 2731.0], [44.2, 2731.0], [44.3, 2731.0], [44.4, 2731.0], [44.5, 2736.0], [44.6, 2736.0], [44.7, 2736.0], [44.8, 2736.0], [44.9, 2736.0], [45.0, 2738.0], [45.1, 2738.0], [45.2, 2738.0], [45.3, 2738.0], [45.4, 2738.0], [45.5, 2740.0], [45.6, 2740.0], [45.7, 2740.0], [45.8, 2740.0], [45.9, 2740.0], [46.0, 2751.0], [46.1, 2751.0], [46.2, 2751.0], [46.3, 2751.0], [46.4, 2751.0], [46.5, 2768.0], [46.6, 2768.0], [46.7, 2768.0], [46.8, 2768.0], [46.9, 2768.0], [47.0, 2771.0], [47.1, 2771.0], [47.2, 2771.0], [47.3, 2771.0], [47.4, 2771.0], [47.5, 2771.0], [47.6, 2771.0], [47.7, 2771.0], [47.8, 2771.0], [47.9, 2771.0], [48.0, 2773.0], [48.1, 2773.0], [48.2, 2773.0], [48.3, 2773.0], [48.4, 2773.0], [48.5, 2794.0], [48.6, 2794.0], [48.7, 2794.0], [48.8, 2794.0], [48.9, 2794.0], [49.0, 2804.0], [49.1, 2804.0], [49.2, 2804.0], [49.3, 2804.0], [49.4, 2804.0], [49.5, 2828.0], [49.6, 2828.0], [49.7, 2828.0], [49.8, 2828.0], [49.9, 2828.0], [50.0, 5177.0], [50.1, 5177.0], [50.2, 5177.0], [50.3, 5177.0], [50.4, 5177.0], [50.5, 5271.0], [50.6, 5271.0], [50.7, 5271.0], [50.8, 5271.0], [50.9, 5271.0], [51.0, 5316.0], [51.1, 5316.0], [51.2, 5316.0], [51.3, 5316.0], [51.4, 5316.0], [51.5, 5317.0], [51.6, 5317.0], [51.7, 5317.0], [51.8, 5317.0], [51.9, 5317.0], [52.0, 5389.0], [52.1, 5389.0], [52.2, 5389.0], [52.3, 5389.0], [52.4, 5389.0], [52.5, 5413.0], [52.6, 5413.0], [52.7, 5413.0], [52.8, 5413.0], [52.9, 5413.0], [53.0, 5459.0], [53.1, 5459.0], [53.2, 5459.0], [53.3, 5459.0], [53.4, 5459.0], [53.5, 5484.0], [53.6, 5484.0], [53.7, 5484.0], [53.8, 5484.0], [53.9, 5484.0], [54.0, 5491.0], [54.1, 5491.0], [54.2, 5491.0], [54.3, 5491.0], [54.4, 5491.0], [54.5, 5518.0], [54.6, 5518.0], [54.7, 5518.0], [54.8, 5518.0], [54.9, 5518.0], [55.0, 5604.0], [55.1, 5604.0], [55.2, 5604.0], [55.3, 5604.0], [55.4, 5604.0], [55.5, 5631.0], [55.6, 5631.0], [55.7, 5631.0], [55.8, 5631.0], [55.9, 5631.0], [56.0, 5785.0], [56.1, 5785.0], [56.2, 5785.0], [56.3, 5785.0], [56.4, 5785.0], [56.5, 5832.0], [56.6, 5832.0], [56.7, 5832.0], [56.8, 5832.0], [56.9, 5832.0], [57.0, 5917.0], [57.1, 5917.0], [57.2, 5917.0], [57.3, 5917.0], [57.4, 5917.0], [57.5, 5935.0], [57.6, 5935.0], [57.7, 5935.0], [57.8, 5935.0], [57.9, 5935.0], [58.0, 5948.0], [58.1, 5948.0], [58.2, 5948.0], [58.3, 5948.0], [58.4, 5948.0], [58.5, 5959.0], [58.6, 5959.0], [58.7, 5959.0], [58.8, 5959.0], [58.9, 5959.0], [59.0, 5970.0], [59.1, 5970.0], [59.2, 5970.0], [59.3, 5970.0], [59.4, 5970.0], [59.5, 6007.0], [59.6, 6007.0], [59.7, 6007.0], [59.8, 6007.0], [59.9, 6007.0], [60.0, 6030.0], [60.1, 6030.0], [60.2, 6030.0], [60.3, 6030.0], [60.4, 6030.0], [60.5, 6050.0], [60.6, 6050.0], [60.7, 6050.0], [60.8, 6050.0], [60.9, 6050.0], [61.0, 6079.0], [61.1, 6079.0], [61.2, 6079.0], [61.3, 6079.0], [61.4, 6079.0], [61.5, 6089.0], [61.6, 6089.0], [61.7, 6089.0], [61.8, 6089.0], [61.9, 6089.0], [62.0, 6161.0], [62.1, 6161.0], [62.2, 6161.0], [62.3, 6161.0], [62.4, 6161.0], [62.5, 6253.0], [62.6, 6253.0], [62.7, 6253.0], [62.8, 6253.0], [62.9, 6253.0], [63.0, 6293.0], [63.1, 6293.0], [63.2, 6293.0], [63.3, 6293.0], [63.4, 6293.0], [63.5, 6309.0], [63.6, 6309.0], [63.7, 6309.0], [63.8, 6309.0], [63.9, 6309.0], [64.0, 6331.0], [64.1, 6331.0], [64.2, 6331.0], [64.3, 6331.0], [64.4, 6331.0], [64.5, 6363.0], [64.6, 6363.0], [64.7, 6363.0], [64.8, 6363.0], [64.9, 6363.0], [65.0, 6368.0], [65.1, 6368.0], [65.2, 6368.0], [65.3, 6368.0], [65.4, 6368.0], [65.5, 6383.0], [65.6, 6383.0], [65.7, 6383.0], [65.8, 6383.0], [65.9, 6383.0], [66.0, 6406.0], [66.1, 6406.0], [66.2, 6406.0], [66.3, 6406.0], [66.4, 6406.0], [66.5, 6409.0], [66.6, 6409.0], [66.7, 6409.0], [66.8, 6409.0], [66.9, 6409.0], [67.0, 6455.0], [67.1, 6455.0], [67.2, 6455.0], [67.3, 6455.0], [67.4, 6455.0], [67.5, 6493.0], [67.6, 6493.0], [67.7, 6493.0], [67.8, 6493.0], [67.9, 6493.0], [68.0, 6620.0], [68.1, 6620.0], [68.2, 6620.0], [68.3, 6620.0], [68.4, 6620.0], [68.5, 6643.0], [68.6, 6643.0], [68.7, 6643.0], [68.8, 6643.0], [68.9, 6643.0], [69.0, 6653.0], [69.1, 6653.0], [69.2, 6653.0], [69.3, 6653.0], [69.4, 6653.0], [69.5, 6664.0], [69.6, 6664.0], [69.7, 6664.0], [69.8, 6664.0], [69.9, 6664.0], [70.0, 6671.0], [70.1, 6671.0], [70.2, 6671.0], [70.3, 6671.0], [70.4, 6671.0], [70.5, 6720.0], [70.6, 6720.0], [70.7, 6720.0], [70.8, 6720.0], [70.9, 6720.0], [71.0, 6771.0], [71.1, 6771.0], [71.2, 6771.0], [71.3, 6771.0], [71.4, 6771.0], [71.5, 6781.0], [71.6, 6781.0], [71.7, 6781.0], [71.8, 6781.0], [71.9, 6781.0], [72.0, 6783.0], [72.1, 6783.0], [72.2, 6783.0], [72.3, 6783.0], [72.4, 6783.0], [72.5, 6834.0], [72.6, 6834.0], [72.7, 6834.0], [72.8, 6834.0], [72.9, 6834.0], [73.0, 6841.0], [73.1, 6841.0], [73.2, 6841.0], [73.3, 6841.0], [73.4, 6841.0], [73.5, 6844.0], [73.6, 6844.0], [73.7, 6844.0], [73.8, 6844.0], [73.9, 6844.0], [74.0, 6858.0], [74.1, 6858.0], [74.2, 6858.0], [74.3, 6858.0], [74.4, 6858.0], [74.5, 6866.0], [74.6, 6866.0], [74.7, 6866.0], [74.8, 6866.0], [74.9, 6866.0], [75.0, 6896.0], [75.1, 6896.0], [75.2, 6896.0], [75.3, 6896.0], [75.4, 6896.0], [75.5, 6932.0], [75.6, 6932.0], [75.7, 6932.0], [75.8, 6932.0], [75.9, 6932.0], [76.0, 6951.0], [76.1, 6951.0], [76.2, 6951.0], [76.3, 6951.0], [76.4, 6951.0], [76.5, 6972.0], [76.6, 6972.0], [76.7, 6972.0], [76.8, 6972.0], [76.9, 6972.0], [77.0, 6998.0], [77.1, 6998.0], [77.2, 6998.0], [77.3, 6998.0], [77.4, 6998.0], [77.5, 7017.0], [77.6, 7017.0], [77.7, 7017.0], [77.8, 7017.0], [77.9, 7017.0], [78.0, 7050.0], [78.1, 7050.0], [78.2, 7050.0], [78.3, 7050.0], [78.4, 7050.0], [78.5, 7070.0], [78.6, 7070.0], [78.7, 7070.0], [78.8, 7070.0], [78.9, 7070.0], [79.0, 7103.0], [79.1, 7103.0], [79.2, 7103.0], [79.3, 7103.0], [79.4, 7103.0], [79.5, 7117.0], [79.6, 7117.0], [79.7, 7117.0], [79.8, 7117.0], [79.9, 7117.0], [80.0, 7132.0], [80.1, 7132.0], [80.2, 7132.0], [80.3, 7132.0], [80.4, 7132.0], [80.5, 7160.0], [80.6, 7160.0], [80.7, 7160.0], [80.8, 7160.0], [80.9, 7160.0], [81.0, 7168.0], [81.1, 7168.0], [81.2, 7168.0], [81.3, 7168.0], [81.4, 7168.0], [81.5, 7235.0], [81.6, 7235.0], [81.7, 7235.0], [81.8, 7235.0], [81.9, 7235.0], [82.0, 7242.0], [82.1, 7242.0], [82.2, 7242.0], [82.3, 7242.0], [82.4, 7242.0], [82.5, 7280.0], [82.6, 7280.0], [82.7, 7280.0], [82.8, 7280.0], [82.9, 7280.0], [83.0, 7281.0], [83.1, 7281.0], [83.2, 7281.0], [83.3, 7281.0], [83.4, 7281.0], [83.5, 7310.0], [83.6, 7310.0], [83.7, 7310.0], [83.8, 7310.0], [83.9, 7310.0], [84.0, 7332.0], [84.1, 7332.0], [84.2, 7332.0], [84.3, 7332.0], [84.4, 7332.0], [84.5, 7393.0], [84.6, 7393.0], [84.7, 7393.0], [84.8, 7393.0], [84.9, 7393.0], [85.0, 7407.0], [85.1, 7407.0], [85.2, 7407.0], [85.3, 7407.0], [85.4, 7407.0], [85.5, 7441.0], [85.6, 7441.0], [85.7, 7441.0], [85.8, 7441.0], [85.9, 7441.0], [86.0, 7448.0], [86.1, 7448.0], [86.2, 7448.0], [86.3, 7448.0], [86.4, 7448.0], [86.5, 7457.0], [86.6, 7457.0], [86.7, 7457.0], [86.8, 7457.0], [86.9, 7457.0], [87.0, 7479.0], [87.1, 7479.0], [87.2, 7479.0], [87.3, 7479.0], [87.4, 7479.0], [87.5, 7484.0], [87.6, 7484.0], [87.7, 7484.0], [87.8, 7484.0], [87.9, 7484.0], [88.0, 7516.0], [88.1, 7516.0], [88.2, 7516.0], [88.3, 7516.0], [88.4, 7516.0], [88.5, 7526.0], [88.6, 7526.0], [88.7, 7526.0], [88.8, 7526.0], [88.9, 7526.0], [89.0, 7555.0], [89.1, 7555.0], [89.2, 7555.0], [89.3, 7555.0], [89.4, 7555.0], [89.5, 7706.0], [89.6, 7706.0], [89.7, 7706.0], [89.8, 7706.0], [89.9, 7706.0], [90.0, 7726.0], [90.1, 7726.0], [90.2, 7726.0], [90.3, 7726.0], [90.4, 7726.0], [90.5, 7749.0], [90.6, 7749.0], [90.7, 7749.0], [90.8, 7749.0], [90.9, 7749.0], [91.0, 7803.0], [91.1, 7803.0], [91.2, 7803.0], [91.3, 7803.0], [91.4, 7803.0], [91.5, 7808.0], [91.6, 7808.0], [91.7, 7808.0], [91.8, 7808.0], [91.9, 7808.0], [92.0, 7832.0], [92.1, 7832.0], [92.2, 7832.0], [92.3, 7832.0], [92.4, 7832.0], [92.5, 7857.0], [92.6, 7857.0], [92.7, 7857.0], [92.8, 7857.0], [92.9, 7857.0], [93.0, 7887.0], [93.1, 7887.0], [93.2, 7887.0], [93.3, 7887.0], [93.4, 7887.0], [93.5, 7960.0], [93.6, 7960.0], [93.7, 7960.0], [93.8, 7960.0], [93.9, 7960.0], [94.0, 8157.0], [94.1, 8157.0], [94.2, 8157.0], [94.3, 8157.0], [94.4, 8157.0], [94.5, 8189.0], [94.6, 8189.0], [94.7, 8189.0], [94.8, 8189.0], [94.9, 8189.0], [95.0, 8202.0], [95.1, 8202.0], [95.2, 8202.0], [95.3, 8202.0], [95.4, 8202.0], [95.5, 8234.0], [95.6, 8234.0], [95.7, 8234.0], [95.8, 8234.0], [95.9, 8234.0], [96.0, 8345.0], [96.1, 8345.0], [96.2, 8345.0], [96.3, 8345.0], [96.4, 8345.0], [96.5, 8354.0], [96.6, 8354.0], [96.7, 8354.0], [96.8, 8354.0], [96.9, 8354.0], [97.0, 8372.0], [97.1, 8372.0], [97.2, 8372.0], [97.3, 8372.0], [97.4, 8372.0], [97.5, 8419.0], [97.6, 8419.0], [97.7, 8419.0], [97.8, 8419.0], [97.9, 8419.0], [98.0, 8436.0], [98.1, 8436.0], [98.2, 8436.0], [98.3, 8436.0], [98.4, 8436.0], [98.5, 8499.0], [98.6, 8499.0], [98.7, 8499.0], [98.8, 8499.0], [98.9, 8499.0], [99.0, 8565.0], [99.1, 8565.0], [99.2, 8565.0], [99.3, 8565.0], [99.4, 8565.0], [99.5, 8658.0], [99.6, 8658.0], [99.7, 8658.0], [99.8, 8658.0], [99.9, 8658.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[0.0, 27.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 29.0], [0.6, 29.0], [0.7, 29.0], [0.8, 29.0], [0.9, 29.0], [1.0, 174.0], [1.1, 174.0], [1.2, 174.0], [1.3, 174.0], [1.4, 174.0], [1.5, 230.0], [1.6, 230.0], [1.7, 230.0], [1.8, 230.0], [1.9, 230.0], [2.0, 243.0], [2.1, 243.0], [2.2, 243.0], [2.3, 243.0], [2.4, 243.0], [2.5, 268.0], [2.6, 268.0], [2.7, 268.0], [2.8, 268.0], [2.9, 268.0], [3.0, 286.0], [3.1, 286.0], [3.2, 286.0], [3.3, 286.0], [3.4, 286.0], [3.5, 357.0], [3.6, 357.0], [3.7, 357.0], [3.8, 357.0], [3.9, 357.0], [4.0, 357.0], [4.1, 357.0], [4.2, 357.0], [4.3, 357.0], [4.4, 357.0], [4.5, 382.0], [4.6, 382.0], [4.7, 382.0], [4.8, 382.0], [4.9, 382.0], [5.0, 385.0], [5.1, 385.0], [5.2, 385.0], [5.3, 385.0], [5.4, 385.0], [5.5, 404.0], [5.6, 404.0], [5.7, 404.0], [5.8, 404.0], [5.9, 404.0], [6.0, 406.0], [6.1, 406.0], [6.2, 406.0], [6.3, 406.0], [6.4, 406.0], [6.5, 435.0], [6.6, 435.0], [6.7, 435.0], [6.8, 435.0], [6.9, 435.0], [7.0, 443.0], [7.1, 443.0], [7.2, 443.0], [7.3, 443.0], [7.4, 443.0], [7.5, 448.0], [7.6, 448.0], [7.7, 448.0], [7.8, 448.0], [7.9, 448.0], [8.0, 486.0], [8.1, 486.0], [8.2, 486.0], [8.3, 486.0], [8.4, 486.0], [8.5, 489.0], [8.6, 489.0], [8.7, 489.0], [8.8, 489.0], [8.9, 489.0], [9.0, 511.0], [9.1, 511.0], [9.2, 511.0], [9.3, 511.0], [9.4, 511.0], [9.5, 577.0], [9.6, 577.0], [9.7, 577.0], [9.8, 577.0], [9.9, 577.0], [10.0, 581.0], [10.1, 581.0], [10.2, 581.0], [10.3, 581.0], [10.4, 581.0], [10.5, 606.0], [10.6, 606.0], [10.7, 606.0], [10.8, 606.0], [10.9, 606.0], [11.0, 1674.0], [11.1, 1674.0], [11.2, 1674.0], [11.3, 1674.0], [11.4, 1674.0], [11.5, 1739.0], [11.6, 1739.0], [11.7, 1739.0], [11.8, 1739.0], [11.9, 1739.0], [12.0, 1744.0], [12.1, 1744.0], [12.2, 1744.0], [12.3, 1744.0], [12.4, 1744.0], [12.5, 1764.0], [12.6, 1764.0], [12.7, 1764.0], [12.8, 1764.0], [12.9, 1764.0], [13.0, 1764.0], [13.1, 1764.0], [13.2, 1764.0], [13.3, 1764.0], [13.4, 1764.0], [13.5, 1769.0], [13.6, 1769.0], [13.7, 1769.0], [13.8, 1769.0], [13.9, 1769.0], [14.0, 1777.0], [14.1, 1777.0], [14.2, 1777.0], [14.3, 1777.0], [14.4, 1777.0], [14.5, 1811.0], [14.6, 1811.0], [14.7, 1811.0], [14.8, 1811.0], [14.9, 1811.0], [15.0, 1815.0], [15.1, 1815.0], [15.2, 1815.0], [15.3, 1815.0], [15.4, 1815.0], [15.5, 1829.0], [15.6, 1829.0], [15.7, 1829.0], [15.8, 1829.0], [15.9, 1829.0], [16.0, 1835.0], [16.1, 1835.0], [16.2, 1835.0], [16.3, 1835.0], [16.4, 1835.0], [16.5, 1842.0], [16.6, 1842.0], [16.7, 1842.0], [16.8, 1842.0], [16.9, 1842.0], [17.0, 1853.0], [17.1, 1853.0], [17.2, 1853.0], [17.3, 1853.0], [17.4, 1853.0], [17.5, 1854.0], [17.6, 1854.0], [17.7, 1854.0], [17.8, 1854.0], [17.9, 1854.0], [18.0, 1857.0], [18.1, 1857.0], [18.2, 1857.0], [18.3, 1857.0], [18.4, 1857.0], [18.5, 1858.0], [18.6, 1858.0], [18.7, 1858.0], [18.8, 1858.0], [18.9, 1858.0], [19.0, 1878.0], [19.1, 1878.0], [19.2, 1878.0], [19.3, 1878.0], [19.4, 1878.0], [19.5, 1879.0], [19.6, 1879.0], [19.7, 1879.0], [19.8, 1879.0], [19.9, 1879.0], [20.0, 1883.0], [20.1, 1883.0], [20.2, 1883.0], [20.3, 1883.0], [20.4, 1883.0], [20.5, 1887.0], [20.6, 1887.0], [20.7, 1887.0], [20.8, 1887.0], [20.9, 1887.0], [21.0, 1892.0], [21.1, 1892.0], [21.2, 1892.0], [21.3, 1892.0], [21.4, 1892.0], [21.5, 1899.0], [21.6, 1899.0], [21.7, 1899.0], [21.8, 1899.0], [21.9, 1899.0], [22.0, 1900.0], [22.1, 1900.0], [22.2, 1900.0], [22.3, 1900.0], [22.4, 1900.0], [22.5, 1912.0], [22.6, 1912.0], [22.7, 1912.0], [22.8, 1912.0], [22.9, 1912.0], [23.0, 1941.0], [23.1, 1941.0], [23.2, 1941.0], [23.3, 1941.0], [23.4, 1941.0], [23.5, 1951.0], [23.6, 1951.0], [23.7, 1951.0], [23.8, 1951.0], [23.9, 1951.0], [24.0, 1952.0], [24.1, 1952.0], [24.2, 1952.0], [24.3, 1952.0], [24.4, 1952.0], [24.5, 1953.0], [24.6, 1953.0], [24.7, 1953.0], [24.8, 1953.0], [24.9, 1953.0], [25.0, 1955.0], [25.1, 1955.0], [25.2, 1955.0], [25.3, 1955.0], [25.4, 1955.0], [25.5, 1962.0], [25.6, 1962.0], [25.7, 1962.0], [25.8, 1962.0], [25.9, 1962.0], [26.0, 1966.0], [26.1, 1966.0], [26.2, 1966.0], [26.3, 1966.0], [26.4, 1966.0], [26.5, 1967.0], [26.6, 1967.0], [26.7, 1967.0], [26.8, 1967.0], [26.9, 1967.0], [27.0, 1977.0], [27.1, 1977.0], [27.2, 1977.0], [27.3, 1977.0], [27.4, 1977.0], [27.5, 1981.0], [27.6, 1981.0], [27.7, 1981.0], [27.8, 1981.0], [27.9, 1981.0], [28.0, 1988.0], [28.1, 1988.0], [28.2, 1988.0], [28.3, 1988.0], [28.4, 1988.0], [28.5, 1996.0], [28.6, 1996.0], [28.7, 1996.0], [28.8, 1996.0], [28.9, 1996.0], [29.0, 1996.0], [29.1, 1996.0], [29.2, 1996.0], [29.3, 1996.0], [29.4, 1996.0], [29.5, 1997.0], [29.6, 1997.0], [29.7, 1997.0], [29.8, 1997.0], [29.9, 1997.0], [30.0, 1997.0], [30.1, 1997.0], [30.2, 1997.0], [30.3, 1997.0], [30.4, 1997.0], [30.5, 1998.0], [30.6, 1998.0], [30.7, 1998.0], [30.8, 1998.0], [30.9, 1998.0], [31.0, 1999.0], [31.1, 1999.0], [31.2, 1999.0], [31.3, 1999.0], [31.4, 1999.0], [31.5, 2002.0], [31.6, 2002.0], [31.7, 2002.0], [31.8, 2002.0], [31.9, 2002.0], [32.0, 2006.0], [32.1, 2006.0], [32.2, 2006.0], [32.3, 2006.0], [32.4, 2006.0], [32.5, 2019.0], [32.6, 2019.0], [32.7, 2019.0], [32.8, 2019.0], [32.9, 2019.0], [33.0, 2037.0], [33.1, 2037.0], [33.2, 2037.0], [33.3, 2037.0], [33.4, 2037.0], [33.5, 2061.0], [33.6, 2061.0], [33.7, 2061.0], [33.8, 2061.0], [33.9, 2061.0], [34.0, 2067.0], [34.1, 2067.0], [34.2, 2067.0], [34.3, 2067.0], [34.4, 2067.0], [34.5, 2068.0], [34.6, 2068.0], [34.7, 2068.0], [34.8, 2068.0], [34.9, 2068.0], [35.0, 2078.0], [35.1, 2078.0], [35.2, 2078.0], [35.3, 2078.0], [35.4, 2078.0], [35.5, 2091.0], [35.6, 2091.0], [35.7, 2091.0], [35.8, 2091.0], [35.9, 2091.0], [36.0, 2096.0], [36.1, 2096.0], [36.2, 2096.0], [36.3, 2096.0], [36.4, 2096.0], [36.5, 2100.0], [36.6, 2100.0], [36.7, 2100.0], [36.8, 2100.0], [36.9, 2100.0], [37.0, 2105.0], [37.1, 2105.0], [37.2, 2105.0], [37.3, 2105.0], [37.4, 2105.0], [37.5, 2107.0], [37.6, 2107.0], [37.7, 2107.0], [37.8, 2107.0], [37.9, 2107.0], [38.0, 2118.0], [38.1, 2118.0], [38.2, 2118.0], [38.3, 2118.0], [38.4, 2118.0], [38.5, 2119.0], [38.6, 2119.0], [38.7, 2119.0], [38.8, 2119.0], [38.9, 2119.0], [39.0, 2130.0], [39.1, 2130.0], [39.2, 2130.0], [39.3, 2130.0], [39.4, 2130.0], [39.5, 2130.0], [39.6, 2130.0], [39.7, 2130.0], [39.8, 2130.0], [39.9, 2130.0], [40.0, 2131.0], [40.1, 2131.0], [40.2, 2131.0], [40.3, 2131.0], [40.4, 2131.0], [40.5, 2132.0], [40.6, 2132.0], [40.7, 2132.0], [40.8, 2132.0], [40.9, 2132.0], [41.0, 2133.0], [41.1, 2133.0], [41.2, 2133.0], [41.3, 2133.0], [41.4, 2133.0], [41.5, 2137.0], [41.6, 2137.0], [41.7, 2137.0], [41.8, 2137.0], [41.9, 2137.0], [42.0, 2139.0], [42.1, 2139.0], [42.2, 2139.0], [42.3, 2139.0], [42.4, 2139.0], [42.5, 2141.0], [42.6, 2141.0], [42.7, 2141.0], [42.8, 2141.0], [42.9, 2141.0], [43.0, 2143.0], [43.1, 2143.0], [43.2, 2143.0], [43.3, 2143.0], [43.4, 2143.0], [43.5, 2143.0], [43.6, 2143.0], [43.7, 2143.0], [43.8, 2143.0], [43.9, 2143.0], [44.0, 2145.0], [44.1, 2145.0], [44.2, 2145.0], [44.3, 2145.0], [44.4, 2145.0], [44.5, 2156.0], [44.6, 2156.0], [44.7, 2156.0], [44.8, 2156.0], [44.9, 2156.0], [45.0, 2156.0], [45.1, 2156.0], [45.2, 2156.0], [45.3, 2156.0], [45.4, 2156.0], [45.5, 2164.0], [45.6, 2164.0], [45.7, 2164.0], [45.8, 2164.0], [45.9, 2164.0], [46.0, 2169.0], [46.1, 2169.0], [46.2, 2169.0], [46.3, 2169.0], [46.4, 2169.0], [46.5, 2169.0], [46.6, 2169.0], [46.7, 2169.0], [46.8, 2169.0], [46.9, 2169.0], [47.0, 2174.0], [47.1, 2174.0], [47.2, 2174.0], [47.3, 2174.0], [47.4, 2174.0], [47.5, 2175.0], [47.6, 2175.0], [47.7, 2175.0], [47.8, 2175.0], [47.9, 2175.0], [48.0, 2181.0], [48.1, 2181.0], [48.2, 2181.0], [48.3, 2181.0], [48.4, 2181.0], [48.5, 2181.0], [48.6, 2181.0], [48.7, 2181.0], [48.8, 2181.0], [48.9, 2181.0], [49.0, 2182.0], [49.1, 2182.0], [49.2, 2182.0], [49.3, 2182.0], [49.4, 2182.0], [49.5, 2183.0], [49.6, 2183.0], [49.7, 2183.0], [49.8, 2183.0], [49.9, 2183.0], [50.0, 2185.0], [50.1, 2185.0], [50.2, 2185.0], [50.3, 2185.0], [50.4, 2185.0], [50.5, 2192.0], [50.6, 2192.0], [50.7, 2192.0], [50.8, 2192.0], [50.9, 2192.0], [51.0, 2197.0], [51.1, 2197.0], [51.2, 2197.0], [51.3, 2197.0], [51.4, 2197.0], [51.5, 2199.0], [51.6, 2199.0], [51.7, 2199.0], [51.8, 2199.0], [51.9, 2199.0], [52.0, 2212.0], [52.1, 2212.0], [52.2, 2212.0], [52.3, 2212.0], [52.4, 2212.0], [52.5, 2216.0], [52.6, 2216.0], [52.7, 2216.0], [52.8, 2216.0], [52.9, 2216.0], [53.0, 2223.0], [53.1, 2223.0], [53.2, 2223.0], [53.3, 2223.0], [53.4, 2223.0], [53.5, 2223.0], [53.6, 2223.0], [53.7, 2223.0], [53.8, 2223.0], [53.9, 2223.0], [54.0, 2226.0], [54.1, 2226.0], [54.2, 2226.0], [54.3, 2226.0], [54.4, 2226.0], [54.5, 2227.0], [54.6, 2227.0], [54.7, 2227.0], [54.8, 2227.0], [54.9, 2227.0], [55.0, 2228.0], [55.1, 2228.0], [55.2, 2228.0], [55.3, 2228.0], [55.4, 2228.0], [55.5, 2235.0], [55.6, 2235.0], [55.7, 2235.0], [55.8, 2235.0], [55.9, 2235.0], [56.0, 2240.0], [56.1, 2240.0], [56.2, 2240.0], [56.3, 2240.0], [56.4, 2240.0], [56.5, 2244.0], [56.6, 2244.0], [56.7, 2244.0], [56.8, 2244.0], [56.9, 2244.0], [57.0, 2248.0], [57.1, 2248.0], [57.2, 2248.0], [57.3, 2248.0], [57.4, 2248.0], [57.5, 2256.0], [57.6, 2256.0], [57.7, 2256.0], [57.8, 2256.0], [57.9, 2256.0], [58.0, 2267.0], [58.1, 2267.0], [58.2, 2267.0], [58.3, 2267.0], [58.4, 2267.0], [58.5, 2268.0], [58.6, 2268.0], [58.7, 2268.0], [58.8, 2268.0], [58.9, 2268.0], [59.0, 2293.0], [59.1, 2293.0], [59.2, 2293.0], [59.3, 2293.0], [59.4, 2293.0], [59.5, 2295.0], [59.6, 2295.0], [59.7, 2295.0], [59.8, 2295.0], [59.9, 2295.0], [60.0, 2317.0], [60.1, 2317.0], [60.2, 2317.0], [60.3, 2317.0], [60.4, 2317.0], [60.5, 2322.0], [60.6, 2322.0], [60.7, 2322.0], [60.8, 2322.0], [60.9, 2322.0], [61.0, 2348.0], [61.1, 2348.0], [61.2, 2348.0], [61.3, 2348.0], [61.4, 2348.0], [61.5, 2367.0], [61.6, 2367.0], [61.7, 2367.0], [61.8, 2367.0], [61.9, 2367.0], [62.0, 2374.0], [62.1, 2374.0], [62.2, 2374.0], [62.3, 2374.0], [62.4, 2374.0], [62.5, 2377.0], [62.6, 2377.0], [62.7, 2377.0], [62.8, 2377.0], [62.9, 2377.0], [63.0, 2380.0], [63.1, 2380.0], [63.2, 2380.0], [63.3, 2380.0], [63.4, 2380.0], [63.5, 2401.0], [63.6, 2401.0], [63.7, 2401.0], [63.8, 2401.0], [63.9, 2401.0], [64.0, 2409.0], [64.1, 2409.0], [64.2, 2409.0], [64.3, 2409.0], [64.4, 2409.0], [64.5, 2418.0], [64.6, 2418.0], [64.7, 2418.0], [64.8, 2418.0], [64.9, 2418.0], [65.0, 2421.0], [65.1, 2421.0], [65.2, 2421.0], [65.3, 2421.0], [65.4, 2421.0], [65.5, 2424.0], [65.6, 2424.0], [65.7, 2424.0], [65.8, 2424.0], [65.9, 2424.0], [66.0, 2435.0], [66.1, 2435.0], [66.2, 2435.0], [66.3, 2435.0], [66.4, 2435.0], [66.5, 2436.0], [66.6, 2436.0], [66.7, 2436.0], [66.8, 2436.0], [66.9, 2436.0], [67.0, 2451.0], [67.1, 2451.0], [67.2, 2451.0], [67.3, 2451.0], [67.4, 2451.0], [67.5, 2467.0], [67.6, 2467.0], [67.7, 2467.0], [67.8, 2467.0], [67.9, 2467.0], [68.0, 2480.0], [68.1, 2480.0], [68.2, 2480.0], [68.3, 2480.0], [68.4, 2480.0], [68.5, 2491.0], [68.6, 2491.0], [68.7, 2491.0], [68.8, 2491.0], [68.9, 2491.0], [69.0, 2496.0], [69.1, 2496.0], [69.2, 2496.0], [69.3, 2496.0], [69.4, 2496.0], [69.5, 2499.0], [69.6, 2499.0], [69.7, 2499.0], [69.8, 2499.0], [69.9, 2499.0], [70.0, 2504.0], [70.1, 2504.0], [70.2, 2504.0], [70.3, 2504.0], [70.4, 2504.0], [70.5, 2504.0], [70.6, 2504.0], [70.7, 2504.0], [70.8, 2504.0], [70.9, 2504.0], [71.0, 2506.0], [71.1, 2506.0], [71.2, 2506.0], [71.3, 2506.0], [71.4, 2506.0], [71.5, 2515.0], [71.6, 2515.0], [71.7, 2515.0], [71.8, 2515.0], [71.9, 2515.0], [72.0, 2517.0], [72.1, 2517.0], [72.2, 2517.0], [72.3, 2517.0], [72.4, 2517.0], [72.5, 2523.0], [72.6, 2523.0], [72.7, 2523.0], [72.8, 2523.0], [72.9, 2523.0], [73.0, 2526.0], [73.1, 2526.0], [73.2, 2526.0], [73.3, 2526.0], [73.4, 2526.0], [73.5, 2527.0], [73.6, 2527.0], [73.7, 2527.0], [73.8, 2527.0], [73.9, 2527.0], [74.0, 2535.0], [74.1, 2535.0], [74.2, 2535.0], [74.3, 2535.0], [74.4, 2535.0], [74.5, 2535.0], [74.6, 2535.0], [74.7, 2535.0], [74.8, 2535.0], [74.9, 2535.0], [75.0, 2543.0], [75.1, 2543.0], [75.2, 2543.0], [75.3, 2543.0], [75.4, 2543.0], [75.5, 2547.0], [75.6, 2547.0], [75.7, 2547.0], [75.8, 2547.0], [75.9, 2547.0], [76.0, 2549.0], [76.1, 2549.0], [76.2, 2549.0], [76.3, 2549.0], [76.4, 2549.0], [76.5, 2553.0], [76.6, 2553.0], [76.7, 2553.0], [76.8, 2553.0], [76.9, 2553.0], [77.0, 2557.0], [77.1, 2557.0], [77.2, 2557.0], [77.3, 2557.0], [77.4, 2557.0], [77.5, 2561.0], [77.6, 2561.0], [77.7, 2561.0], [77.8, 2561.0], [77.9, 2561.0], [78.0, 2568.0], [78.1, 2568.0], [78.2, 2568.0], [78.3, 2568.0], [78.4, 2568.0], [78.5, 2575.0], [78.6, 2575.0], [78.7, 2575.0], [78.8, 2575.0], [78.9, 2575.0], [79.0, 2584.0], [79.1, 2584.0], [79.2, 2584.0], [79.3, 2584.0], [79.4, 2584.0], [79.5, 2600.0], [79.6, 2600.0], [79.7, 2600.0], [79.8, 2600.0], [79.9, 2600.0], [80.0, 2604.0], [80.1, 2604.0], [80.2, 2604.0], [80.3, 2604.0], [80.4, 2604.0], [80.5, 2607.0], [80.6, 2607.0], [80.7, 2607.0], [80.8, 2607.0], [80.9, 2607.0], [81.0, 2608.0], [81.1, 2608.0], [81.2, 2608.0], [81.3, 2608.0], [81.4, 2608.0], [81.5, 2611.0], [81.6, 2611.0], [81.7, 2611.0], [81.8, 2611.0], [81.9, 2611.0], [82.0, 2613.0], [82.1, 2613.0], [82.2, 2613.0], [82.3, 2613.0], [82.4, 2613.0], [82.5, 2616.0], [82.6, 2616.0], [82.7, 2616.0], [82.8, 2616.0], [82.9, 2616.0], [83.0, 2617.0], [83.1, 2617.0], [83.2, 2617.0], [83.3, 2617.0], [83.4, 2617.0], [83.5, 2625.0], [83.6, 2625.0], [83.7, 2625.0], [83.8, 2625.0], [83.9, 2625.0], [84.0, 2627.0], [84.1, 2627.0], [84.2, 2627.0], [84.3, 2627.0], [84.4, 2627.0], [84.5, 2628.0], [84.6, 2628.0], [84.7, 2628.0], [84.8, 2628.0], [84.9, 2628.0], [85.0, 2635.0], [85.1, 2635.0], [85.2, 2635.0], [85.3, 2635.0], [85.4, 2635.0], [85.5, 2638.0], [85.6, 2638.0], [85.7, 2638.0], [85.8, 2638.0], [85.9, 2638.0], [86.0, 2639.0], [86.1, 2639.0], [86.2, 2639.0], [86.3, 2639.0], [86.4, 2639.0], [86.5, 2640.0], [86.6, 2640.0], [86.7, 2640.0], [86.8, 2640.0], [86.9, 2640.0], [87.0, 2641.0], [87.1, 2641.0], [87.2, 2641.0], [87.3, 2641.0], [87.4, 2641.0], [87.5, 2642.0], [87.6, 2642.0], [87.7, 2642.0], [87.8, 2642.0], [87.9, 2642.0], [88.0, 2646.0], [88.1, 2646.0], [88.2, 2646.0], [88.3, 2646.0], [88.4, 2646.0], [88.5, 2660.0], [88.6, 2660.0], [88.7, 2660.0], [88.8, 2660.0], [88.9, 2660.0], [89.0, 2661.0], [89.1, 2661.0], [89.2, 2661.0], [89.3, 2661.0], [89.4, 2661.0], [89.5, 2662.0], [89.6, 2662.0], [89.7, 2662.0], [89.8, 2662.0], [89.9, 2662.0], [90.0, 2674.0], [90.1, 2674.0], [90.2, 2674.0], [90.3, 2674.0], [90.4, 2674.0], [90.5, 2676.0], [90.6, 2676.0], [90.7, 2676.0], [90.8, 2676.0], [90.9, 2676.0], [91.0, 2677.0], [91.1, 2677.0], [91.2, 2677.0], [91.3, 2677.0], [91.4, 2677.0], [91.5, 2679.0], [91.6, 2679.0], [91.7, 2679.0], [91.8, 2679.0], [91.9, 2679.0], [92.0, 2685.0], [92.1, 2685.0], [92.2, 2685.0], [92.3, 2685.0], [92.4, 2685.0], [92.5, 2688.0], [92.6, 2688.0], [92.7, 2688.0], [92.8, 2688.0], [92.9, 2688.0], [93.0, 2690.0], [93.1, 2690.0], [93.2, 2690.0], [93.3, 2690.0], [93.4, 2690.0], [93.5, 2701.0], [93.6, 2701.0], [93.7, 2701.0], [93.8, 2701.0], [93.9, 2701.0], [94.0, 2715.0], [94.1, 2715.0], [94.2, 2715.0], [94.3, 2715.0], [94.4, 2715.0], [94.5, 2718.0], [94.6, 2718.0], [94.7, 2718.0], [94.8, 2718.0], [94.9, 2718.0], [95.0, 2736.0], [95.1, 2736.0], [95.2, 2736.0], [95.3, 2736.0], [95.4, 2736.0], [95.5, 2741.0], [95.6, 2741.0], [95.7, 2741.0], [95.8, 2741.0], [95.9, 2741.0], [96.0, 2758.0], [96.1, 2758.0], [96.2, 2758.0], [96.3, 2758.0], [96.4, 2758.0], [96.5, 2811.0], [96.6, 2811.0], [96.7, 2811.0], [96.8, 2811.0], [96.9, 2811.0], [97.0, 2856.0], [97.1, 2856.0], [97.2, 2856.0], [97.3, 2856.0], [97.4, 2856.0], [97.5, 2886.0], [97.6, 2886.0], [97.7, 2886.0], [97.8, 2886.0], [97.9, 2886.0], [98.0, 2888.0], [98.1, 2888.0], [98.2, 2888.0], [98.3, 2888.0], [98.4, 2888.0], [98.5, 2889.0], [98.6, 2889.0], [98.7, 2889.0], [98.8, 2889.0], [98.9, 2889.0], [99.0, 2890.0], [99.1, 2890.0], [99.2, 2890.0], [99.3, 2890.0], [99.4, 2890.0], [99.5, 2914.0], [99.6, 2914.0], [99.7, 2914.0], [99.8, 2914.0], [99.9, 2914.0]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[0.0, 162.0], [0.1, 162.0], [0.2, 162.0], [0.3, 162.0], [0.4, 162.0], [0.5, 203.0], [0.6, 203.0], [0.7, 203.0], [0.8, 203.0], [0.9, 203.0], [1.0, 228.0], [1.1, 228.0], [1.2, 228.0], [1.3, 228.0], [1.4, 228.0], [1.5, 297.0], [1.6, 297.0], [1.7, 297.0], [1.8, 297.0], [1.9, 297.0], [2.0, 429.0], [2.1, 429.0], [2.2, 429.0], [2.3, 429.0], [2.4, 429.0], [2.5, 436.0], [2.6, 436.0], [2.7, 436.0], [2.8, 436.0], [2.9, 436.0], [3.0, 442.0], [3.1, 442.0], [3.2, 442.0], [3.3, 442.0], [3.4, 442.0], [3.5, 446.0], [3.6, 446.0], [3.7, 446.0], [3.8, 446.0], [3.9, 446.0], [4.0, 449.0], [4.1, 449.0], [4.2, 449.0], [4.3, 449.0], [4.4, 449.0], [4.5, 450.0], [4.6, 450.0], [4.7, 450.0], [4.8, 450.0], [4.9, 450.0], [5.0, 454.0], [5.1, 454.0], [5.2, 454.0], [5.3, 454.0], [5.4, 454.0], [5.5, 455.0], [5.6, 455.0], [5.7, 455.0], [5.8, 455.0], [5.9, 455.0], [6.0, 456.0], [6.1, 456.0], [6.2, 456.0], [6.3, 456.0], [6.4, 456.0], [6.5, 469.0], [6.6, 469.0], [6.7, 469.0], [6.8, 469.0], [6.9, 469.0], [7.0, 474.0], [7.1, 474.0], [7.2, 474.0], [7.3, 474.0], [7.4, 474.0], [7.5, 489.0], [7.6, 489.0], [7.7, 489.0], [7.8, 489.0], [7.9, 489.0], [8.0, 493.0], [8.1, 493.0], [8.2, 493.0], [8.3, 493.0], [8.4, 493.0], [8.5, 493.0], [8.6, 493.0], [8.7, 493.0], [8.8, 493.0], [8.9, 493.0], [9.0, 512.0], [9.1, 512.0], [9.2, 512.0], [9.3, 512.0], [9.4, 512.0], [9.5, 519.0], [9.6, 519.0], [9.7, 519.0], [9.8, 519.0], [9.9, 519.0], [10.0, 539.0], [10.1, 539.0], [10.2, 539.0], [10.3, 539.0], [10.4, 539.0], [10.5, 549.0], [10.6, 549.0], [10.7, 549.0], [10.8, 549.0], [10.9, 549.0], [11.0, 553.0], [11.1, 553.0], [11.2, 553.0], [11.3, 553.0], [11.4, 553.0], [11.5, 553.0], [11.6, 553.0], [11.7, 553.0], [11.8, 553.0], [11.9, 553.0], [12.0, 558.0], [12.1, 558.0], [12.2, 558.0], [12.3, 558.0], [12.4, 558.0], [12.5, 559.0], [12.6, 559.0], [12.7, 559.0], [12.8, 559.0], [12.9, 559.0], [13.0, 560.0], [13.1, 560.0], [13.2, 560.0], [13.3, 560.0], [13.4, 560.0], [13.5, 566.0], [13.6, 566.0], [13.7, 566.0], [13.8, 566.0], [13.9, 566.0], [14.0, 576.0], [14.1, 576.0], [14.2, 576.0], [14.3, 576.0], [14.4, 576.0], [14.5, 602.0], [14.6, 602.0], [14.7, 602.0], [14.8, 602.0], [14.9, 602.0], [15.0, 602.0], [15.1, 602.0], [15.2, 602.0], [15.3, 602.0], [15.4, 602.0], [15.5, 604.0], [15.6, 604.0], [15.7, 604.0], [15.8, 604.0], [15.9, 604.0], [16.0, 605.0], [16.1, 605.0], [16.2, 605.0], [16.3, 605.0], [16.4, 605.0], [16.5, 614.0], [16.6, 614.0], [16.7, 614.0], [16.8, 614.0], [16.9, 614.0], [17.0, 625.0], [17.1, 625.0], [17.2, 625.0], [17.3, 625.0], [17.4, 625.0], [17.5, 626.0], [17.6, 626.0], [17.7, 626.0], [17.8, 626.0], [17.9, 626.0], [18.0, 630.0], [18.1, 630.0], [18.2, 630.0], [18.3, 630.0], [18.4, 630.0], [18.5, 632.0], [18.6, 632.0], [18.7, 632.0], [18.8, 632.0], [18.9, 632.0], [19.0, 634.0], [19.1, 634.0], [19.2, 634.0], [19.3, 634.0], [19.4, 634.0], [19.5, 638.0], [19.6, 638.0], [19.7, 638.0], [19.8, 638.0], [19.9, 638.0], [20.0, 645.0], [20.1, 645.0], [20.2, 645.0], [20.3, 645.0], [20.4, 645.0], [20.5, 649.0], [20.6, 649.0], [20.7, 649.0], [20.8, 649.0], [20.9, 649.0], [21.0, 652.0], [21.1, 652.0], [21.2, 652.0], [21.3, 652.0], [21.4, 652.0], [21.5, 660.0], [21.6, 660.0], [21.7, 660.0], [21.8, 660.0], [21.9, 660.0], [22.0, 670.0], [22.1, 670.0], [22.2, 670.0], [22.3, 670.0], [22.4, 670.0], [22.5, 677.0], [22.6, 677.0], [22.7, 677.0], [22.8, 677.0], [22.9, 677.0], [23.0, 678.0], [23.1, 678.0], [23.2, 678.0], [23.3, 678.0], [23.4, 678.0], [23.5, 688.0], [23.6, 688.0], [23.7, 688.0], [23.8, 688.0], [23.9, 688.0], [24.0, 690.0], [24.1, 690.0], [24.2, 690.0], [24.3, 690.0], [24.4, 690.0], [24.5, 698.0], [24.6, 698.0], [24.7, 698.0], [24.8, 698.0], [24.9, 698.0], [25.0, 708.0], [25.1, 708.0], [25.2, 708.0], [25.3, 708.0], [25.4, 708.0], [25.5, 722.0], [25.6, 722.0], [25.7, 722.0], [25.8, 722.0], [25.9, 722.0], [26.0, 732.0], [26.1, 732.0], [26.2, 732.0], [26.3, 732.0], [26.4, 732.0], [26.5, 744.0], [26.6, 744.0], [26.7, 744.0], [26.8, 744.0], [26.9, 744.0], [27.0, 745.0], [27.1, 745.0], [27.2, 745.0], [27.3, 745.0], [27.4, 745.0], [27.5, 756.0], [27.6, 756.0], [27.7, 756.0], [27.8, 756.0], [27.9, 756.0], [28.0, 772.0], [28.1, 772.0], [28.2, 772.0], [28.3, 772.0], [28.4, 772.0], [28.5, 779.0], [28.6, 779.0], [28.7, 779.0], [28.8, 779.0], [28.9, 779.0], [29.0, 780.0], [29.1, 780.0], [29.2, 780.0], [29.3, 780.0], [29.4, 780.0], [29.5, 785.0], [29.6, 785.0], [29.7, 785.0], [29.8, 785.0], [29.9, 785.0], [30.0, 787.0], [30.1, 787.0], [30.2, 787.0], [30.3, 787.0], [30.4, 787.0], [30.5, 788.0], [30.6, 788.0], [30.7, 788.0], [30.8, 788.0], [30.9, 788.0], [31.0, 790.0], [31.1, 790.0], [31.2, 790.0], [31.3, 790.0], [31.4, 790.0], [31.5, 791.0], [31.6, 791.0], [31.7, 791.0], [31.8, 791.0], [31.9, 791.0], [32.0, 791.0], [32.1, 791.0], [32.2, 791.0], [32.3, 791.0], [32.4, 791.0], [32.5, 791.0], [32.6, 791.0], [32.7, 791.0], [32.8, 791.0], [32.9, 791.0], [33.0, 799.0], [33.1, 799.0], [33.2, 799.0], [33.3, 799.0], [33.4, 799.0], [33.5, 801.0], [33.6, 801.0], [33.7, 801.0], [33.8, 801.0], [33.9, 801.0], [34.0, 814.0], [34.1, 814.0], [34.2, 814.0], [34.3, 814.0], [34.4, 814.0], [34.5, 816.0], [34.6, 816.0], [34.7, 816.0], [34.8, 816.0], [34.9, 816.0], [35.0, 831.0], [35.1, 831.0], [35.2, 831.0], [35.3, 831.0], [35.4, 831.0], [35.5, 831.0], [35.6, 831.0], [35.7, 831.0], [35.8, 831.0], [35.9, 831.0], [36.0, 847.0], [36.1, 847.0], [36.2, 847.0], [36.3, 847.0], [36.4, 847.0], [36.5, 854.0], [36.6, 854.0], [36.7, 854.0], [36.8, 854.0], [36.9, 854.0], [37.0, 861.0], [37.1, 861.0], [37.2, 861.0], [37.3, 861.0], [37.4, 861.0], [37.5, 863.0], [37.6, 863.0], [37.7, 863.0], [37.8, 863.0], [37.9, 863.0], [38.0, 866.0], [38.1, 866.0], [38.2, 866.0], [38.3, 866.0], [38.4, 866.0], [38.5, 868.0], [38.6, 868.0], [38.7, 868.0], [38.8, 868.0], [38.9, 868.0], [39.0, 871.0], [39.1, 871.0], [39.2, 871.0], [39.3, 871.0], [39.4, 871.0], [39.5, 879.0], [39.6, 879.0], [39.7, 879.0], [39.8, 879.0], [39.9, 879.0], [40.0, 883.0], [40.1, 883.0], [40.2, 883.0], [40.3, 883.0], [40.4, 883.0], [40.5, 887.0], [40.6, 887.0], [40.7, 887.0], [40.8, 887.0], [40.9, 887.0], [41.0, 892.0], [41.1, 892.0], [41.2, 892.0], [41.3, 892.0], [41.4, 892.0], [41.5, 894.0], [41.6, 894.0], [41.7, 894.0], [41.8, 894.0], [41.9, 894.0], [42.0, 900.0], [42.1, 900.0], [42.2, 900.0], [42.3, 900.0], [42.4, 900.0], [42.5, 902.0], [42.6, 902.0], [42.7, 902.0], [42.8, 902.0], [42.9, 902.0], [43.0, 912.0], [43.1, 912.0], [43.2, 912.0], [43.3, 912.0], [43.4, 912.0], [43.5, 916.0], [43.6, 916.0], [43.7, 916.0], [43.8, 916.0], [43.9, 916.0], [44.0, 935.0], [44.1, 935.0], [44.2, 935.0], [44.3, 935.0], [44.4, 935.0], [44.5, 940.0], [44.6, 940.0], [44.7, 940.0], [44.8, 940.0], [44.9, 940.0], [45.0, 943.0], [45.1, 943.0], [45.2, 943.0], [45.3, 943.0], [45.4, 943.0], [45.5, 946.0], [45.6, 946.0], [45.7, 946.0], [45.8, 946.0], [45.9, 946.0], [46.0, 956.0], [46.1, 956.0], [46.2, 956.0], [46.3, 956.0], [46.4, 956.0], [46.5, 957.0], [46.6, 957.0], [46.7, 957.0], [46.8, 957.0], [46.9, 957.0], [47.0, 965.0], [47.1, 965.0], [47.2, 965.0], [47.3, 965.0], [47.4, 965.0], [47.5, 967.0], [47.6, 967.0], [47.7, 967.0], [47.8, 967.0], [47.9, 967.0], [48.0, 977.0], [48.1, 977.0], [48.2, 977.0], [48.3, 977.0], [48.4, 977.0], [48.5, 977.0], [48.6, 977.0], [48.7, 977.0], [48.8, 977.0], [48.9, 977.0], [49.0, 1939.0], [49.1, 1939.0], [49.2, 1939.0], [49.3, 1939.0], [49.4, 1939.0], [49.5, 1952.0], [49.6, 1952.0], [49.7, 1952.0], [49.8, 1952.0], [49.9, 1952.0], [50.0, 1966.0], [50.1, 1966.0], [50.2, 1966.0], [50.3, 1966.0], [50.4, 1966.0], [50.5, 2013.0], [50.6, 2013.0], [50.7, 2013.0], [50.8, 2013.0], [50.9, 2013.0], [51.0, 2013.0], [51.1, 2013.0], [51.2, 2013.0], [51.3, 2013.0], [51.4, 2013.0], [51.5, 2015.0], [51.6, 2015.0], [51.7, 2015.0], [51.8, 2015.0], [51.9, 2015.0], [52.0, 2019.0], [52.1, 2019.0], [52.2, 2019.0], [52.3, 2019.0], [52.4, 2019.0], [52.5, 2022.0], [52.6, 2022.0], [52.7, 2022.0], [52.8, 2022.0], [52.9, 2022.0], [53.0, 2029.0], [53.1, 2029.0], [53.2, 2029.0], [53.3, 2029.0], [53.4, 2029.0], [53.5, 2037.0], [53.6, 2037.0], [53.7, 2037.0], [53.8, 2037.0], [53.9, 2037.0], [54.0, 2038.0], [54.1, 2038.0], [54.2, 2038.0], [54.3, 2038.0], [54.4, 2038.0], [54.5, 2041.0], [54.6, 2041.0], [54.7, 2041.0], [54.8, 2041.0], [54.9, 2041.0], [55.0, 2048.0], [55.1, 2048.0], [55.2, 2048.0], [55.3, 2048.0], [55.4, 2048.0], [55.5, 2049.0], [55.6, 2049.0], [55.7, 2049.0], [55.8, 2049.0], [55.9, 2049.0], [56.0, 2051.0], [56.1, 2051.0], [56.2, 2051.0], [56.3, 2051.0], [56.4, 2051.0], [56.5, 2054.0], [56.6, 2054.0], [56.7, 2054.0], [56.8, 2054.0], [56.9, 2054.0], [57.0, 2055.0], [57.1, 2055.0], [57.2, 2055.0], [57.3, 2055.0], [57.4, 2055.0], [57.5, 2059.0], [57.6, 2059.0], [57.7, 2059.0], [57.8, 2059.0], [57.9, 2059.0], [58.0, 2066.0], [58.1, 2066.0], [58.2, 2066.0], [58.3, 2066.0], [58.4, 2066.0], [58.5, 2075.0], [58.6, 2075.0], [58.7, 2075.0], [58.8, 2075.0], [58.9, 2075.0], [59.0, 2076.0], [59.1, 2076.0], [59.2, 2076.0], [59.3, 2076.0], [59.4, 2076.0], [59.5, 2076.0], [59.6, 2076.0], [59.7, 2076.0], [59.8, 2076.0], [59.9, 2076.0], [60.0, 2078.0], [60.1, 2078.0], [60.2, 2078.0], [60.3, 2078.0], [60.4, 2078.0], [60.5, 2080.0], [60.6, 2080.0], [60.7, 2080.0], [60.8, 2080.0], [60.9, 2080.0], [61.0, 2087.0], [61.1, 2087.0], [61.2, 2087.0], [61.3, 2087.0], [61.4, 2087.0], [61.5, 2088.0], [61.6, 2088.0], [61.7, 2088.0], [61.8, 2088.0], [61.9, 2088.0], [62.0, 2089.0], [62.1, 2089.0], [62.2, 2089.0], [62.3, 2089.0], [62.4, 2089.0], [62.5, 2090.0], [62.6, 2090.0], [62.7, 2090.0], [62.8, 2090.0], [62.9, 2090.0], [63.0, 2091.0], [63.1, 2091.0], [63.2, 2091.0], [63.3, 2091.0], [63.4, 2091.0], [63.5, 2094.0], [63.6, 2094.0], [63.7, 2094.0], [63.8, 2094.0], [63.9, 2094.0], [64.0, 2095.0], [64.1, 2095.0], [64.2, 2095.0], [64.3, 2095.0], [64.4, 2095.0], [64.5, 2096.0], [64.6, 2096.0], [64.7, 2096.0], [64.8, 2096.0], [64.9, 2096.0], [65.0, 2103.0], [65.1, 2103.0], [65.2, 2103.0], [65.3, 2103.0], [65.4, 2103.0], [65.5, 2108.0], [65.6, 2108.0], [65.7, 2108.0], [65.8, 2108.0], [65.9, 2108.0], [66.0, 2110.0], [66.1, 2110.0], [66.2, 2110.0], [66.3, 2110.0], [66.4, 2110.0], [66.5, 2110.0], [66.6, 2110.0], [66.7, 2110.0], [66.8, 2110.0], [66.9, 2110.0], [67.0, 2111.0], [67.1, 2111.0], [67.2, 2111.0], [67.3, 2111.0], [67.4, 2111.0], [67.5, 2111.0], [67.6, 2111.0], [67.7, 2111.0], [67.8, 2111.0], [67.9, 2111.0], [68.0, 2112.0], [68.1, 2112.0], [68.2, 2112.0], [68.3, 2112.0], [68.4, 2112.0], [68.5, 2114.0], [68.6, 2114.0], [68.7, 2114.0], [68.8, 2114.0], [68.9, 2114.0], [69.0, 2116.0], [69.1, 2116.0], [69.2, 2116.0], [69.3, 2116.0], [69.4, 2116.0], [69.5, 2119.0], [69.6, 2119.0], [69.7, 2119.0], [69.8, 2119.0], [69.9, 2119.0], [70.0, 2120.0], [70.1, 2120.0], [70.2, 2120.0], [70.3, 2120.0], [70.4, 2120.0], [70.5, 2121.0], [70.6, 2121.0], [70.7, 2121.0], [70.8, 2121.0], [70.9, 2121.0], [71.0, 2122.0], [71.1, 2122.0], [71.2, 2122.0], [71.3, 2122.0], [71.4, 2122.0], [71.5, 2141.0], [71.6, 2141.0], [71.7, 2141.0], [71.8, 2141.0], [71.9, 2141.0], [72.0, 2160.0], [72.1, 2160.0], [72.2, 2160.0], [72.3, 2160.0], [72.4, 2160.0], [72.5, 2162.0], [72.6, 2162.0], [72.7, 2162.0], [72.8, 2162.0], [72.9, 2162.0], [73.0, 2167.0], [73.1, 2167.0], [73.2, 2167.0], [73.3, 2167.0], [73.4, 2167.0], [73.5, 2173.0], [73.6, 2173.0], [73.7, 2173.0], [73.8, 2173.0], [73.9, 2173.0], [74.0, 2175.0], [74.1, 2175.0], [74.2, 2175.0], [74.3, 2175.0], [74.4, 2175.0], [74.5, 2176.0], [74.6, 2176.0], [74.7, 2176.0], [74.8, 2176.0], [74.9, 2176.0], [75.0, 2187.0], [75.1, 2187.0], [75.2, 2187.0], [75.3, 2187.0], [75.4, 2187.0], [75.5, 2196.0], [75.6, 2196.0], [75.7, 2196.0], [75.8, 2196.0], [75.9, 2196.0], [76.0, 2202.0], [76.1, 2202.0], [76.2, 2202.0], [76.3, 2202.0], [76.4, 2202.0], [76.5, 2203.0], [76.6, 2203.0], [76.7, 2203.0], [76.8, 2203.0], [76.9, 2203.0], [77.0, 2209.0], [77.1, 2209.0], [77.2, 2209.0], [77.3, 2209.0], [77.4, 2209.0], [77.5, 2211.0], [77.6, 2211.0], [77.7, 2211.0], [77.8, 2211.0], [77.9, 2211.0], [78.0, 2215.0], [78.1, 2215.0], [78.2, 2215.0], [78.3, 2215.0], [78.4, 2215.0], [78.5, 2216.0], [78.6, 2216.0], [78.7, 2216.0], [78.8, 2216.0], [78.9, 2216.0], [79.0, 2238.0], [79.1, 2238.0], [79.2, 2238.0], [79.3, 2238.0], [79.4, 2238.0], [79.5, 2244.0], [79.6, 2244.0], [79.7, 2244.0], [79.8, 2244.0], [79.9, 2244.0], [80.0, 2267.0], [80.1, 2267.0], [80.2, 2267.0], [80.3, 2267.0], [80.4, 2267.0], [80.5, 2273.0], [80.6, 2273.0], [80.7, 2273.0], [80.8, 2273.0], [80.9, 2273.0], [81.0, 2282.0], [81.1, 2282.0], [81.2, 2282.0], [81.3, 2282.0], [81.4, 2282.0], [81.5, 2282.0], [81.6, 2282.0], [81.7, 2282.0], [81.8, 2282.0], [81.9, 2282.0], [82.0, 2283.0], [82.1, 2283.0], [82.2, 2283.0], [82.3, 2283.0], [82.4, 2283.0], [82.5, 2301.0], [82.6, 2301.0], [82.7, 2301.0], [82.8, 2301.0], [82.9, 2301.0], [83.0, 2302.0], [83.1, 2302.0], [83.2, 2302.0], [83.3, 2302.0], [83.4, 2302.0], [83.5, 2315.0], [83.6, 2315.0], [83.7, 2315.0], [83.8, 2315.0], [83.9, 2315.0], [84.0, 2320.0], [84.1, 2320.0], [84.2, 2320.0], [84.3, 2320.0], [84.4, 2320.0], [84.5, 2321.0], [84.6, 2321.0], [84.7, 2321.0], [84.8, 2321.0], [84.9, 2321.0], [85.0, 2332.0], [85.1, 2332.0], [85.2, 2332.0], [85.3, 2332.0], [85.4, 2332.0], [85.5, 2332.0], [85.6, 2332.0], [85.7, 2332.0], [85.8, 2332.0], [85.9, 2332.0], [86.0, 2337.0], [86.1, 2337.0], [86.2, 2337.0], [86.3, 2337.0], [86.4, 2337.0], [86.5, 2350.0], [86.6, 2350.0], [86.7, 2350.0], [86.8, 2350.0], [86.9, 2350.0], [87.0, 2357.0], [87.1, 2357.0], [87.2, 2357.0], [87.3, 2357.0], [87.4, 2357.0], [87.5, 2359.0], [87.6, 2359.0], [87.7, 2359.0], [87.8, 2359.0], [87.9, 2359.0], [88.0, 2377.0], [88.1, 2377.0], [88.2, 2377.0], [88.3, 2377.0], [88.4, 2377.0], [88.5, 2385.0], [88.6, 2385.0], [88.7, 2385.0], [88.8, 2385.0], [88.9, 2385.0], [89.0, 2389.0], [89.1, 2389.0], [89.2, 2389.0], [89.3, 2389.0], [89.4, 2389.0], [89.5, 2390.0], [89.6, 2390.0], [89.7, 2390.0], [89.8, 2390.0], [89.9, 2390.0], [90.0, 2407.0], [90.1, 2407.0], [90.2, 2407.0], [90.3, 2407.0], [90.4, 2407.0], [90.5, 2411.0], [90.6, 2411.0], [90.7, 2411.0], [90.8, 2411.0], [90.9, 2411.0], [91.0, 2412.0], [91.1, 2412.0], [91.2, 2412.0], [91.3, 2412.0], [91.4, 2412.0], [91.5, 2418.0], [91.6, 2418.0], [91.7, 2418.0], [91.8, 2418.0], [91.9, 2418.0], [92.0, 2418.0], [92.1, 2418.0], [92.2, 2418.0], [92.3, 2418.0], [92.4, 2418.0], [92.5, 2447.0], [92.6, 2447.0], [92.7, 2447.0], [92.8, 2447.0], [92.9, 2447.0], [93.0, 2452.0], [93.1, 2452.0], [93.2, 2452.0], [93.3, 2452.0], [93.4, 2452.0], [93.5, 2457.0], [93.6, 2457.0], [93.7, 2457.0], [93.8, 2457.0], [93.9, 2457.0], [94.0, 2461.0], [94.1, 2461.0], [94.2, 2461.0], [94.3, 2461.0], [94.4, 2461.0], [94.5, 2464.0], [94.6, 2464.0], [94.7, 2464.0], [94.8, 2464.0], [94.9, 2464.0], [95.0, 2476.0], [95.1, 2476.0], [95.2, 2476.0], [95.3, 2476.0], [95.4, 2476.0], [95.5, 2511.0], [95.6, 2511.0], [95.7, 2511.0], [95.8, 2511.0], [95.9, 2511.0], [96.0, 2521.0], [96.1, 2521.0], [96.2, 2521.0], [96.3, 2521.0], [96.4, 2521.0], [96.5, 2528.0], [96.6, 2528.0], [96.7, 2528.0], [96.8, 2528.0], [96.9, 2528.0], [97.0, 2529.0], [97.1, 2529.0], [97.2, 2529.0], [97.3, 2529.0], [97.4, 2529.0], [97.5, 2606.0], [97.6, 2606.0], [97.7, 2606.0], [97.8, 2606.0], [97.9, 2606.0], [98.0, 2641.0], [98.1, 2641.0], [98.2, 2641.0], [98.3, 2641.0], [98.4, 2641.0], [98.5, 2732.0], [98.6, 2732.0], [98.7, 2732.0], [98.8, 2732.0], [98.9, 2732.0], [99.0, 2741.0], [99.1, 2741.0], [99.2, 2741.0], [99.3, 2741.0], [99.4, 2741.0], [99.5, 2846.0], [99.6, 2846.0], [99.7, 2846.0], [99.8, 2846.0], [99.9, 2846.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 31.0, "series": [{"data": [[8200.0, 2.0], [8300.0, 3.0], [8400.0, 3.0], [8500.0, 1.0], [8600.0, 1.0], [2000.0, 2.0], [2300.0, 4.0], [2400.0, 14.0], [2500.0, 30.0], [2600.0, 28.0], [2700.0, 20.0], [2800.0, 2.0], [5100.0, 1.0], [5300.0, 3.0], [5200.0, 1.0], [5400.0, 4.0], [5600.0, 2.0], [5500.0, 1.0], [5800.0, 1.0], [5700.0, 1.0], [5900.0, 5.0], [6000.0, 5.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 5.0], [6400.0, 4.0], [6600.0, 5.0], [6700.0, 4.0], [6800.0, 6.0], [6900.0, 4.0], [7100.0, 5.0], [7000.0, 3.0], [7200.0, 4.0], [7300.0, 3.0], [7400.0, 6.0], [7500.0, 3.0], [7700.0, 3.0], [7800.0, 5.0], [7900.0, 1.0], [8100.0, 2.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[0.0, 2.0], [2100.0, 31.0], [2300.0, 7.0], [2200.0, 16.0], [2400.0, 13.0], [600.0, 1.0], [2500.0, 19.0], [2600.0, 28.0], [2700.0, 6.0], [2800.0, 6.0], [2900.0, 1.0], [200.0, 4.0], [300.0, 4.0], [1600.0, 1.0], [100.0, 1.0], [400.0, 7.0], [1700.0, 6.0], [1800.0, 15.0], [1900.0, 19.0], [2000.0, 10.0], [500.0, 3.0]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[2100.0, 22.0], [2200.0, 13.0], [2300.0, 15.0], [2400.0, 11.0], [600.0, 21.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 2.0], [2800.0, 1.0], [700.0, 17.0], [200.0, 3.0], [800.0, 17.0], [900.0, 14.0], [100.0, 1.0], [400.0, 14.0], [1900.0, 3.0], [2000.0, 29.0], [500.0, 11.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 480.0, "series": [{"data": [[0.0, 34.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 84.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 480.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 74.25190839694659, "minX": 1.71094452E12, "maxY": 100.0, "series": [{"data": [[1.71094458E12, 74.25190839694659], [1.71094452E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094458E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 162.0, "minX": 1.0, "maxY": 4885.365591397848, "series": [{"data": [[93.0, 2642.0], [99.0, 2726.8], [98.0, 2772.0], [97.0, 2786.0], [96.0, 2763.25], [100.0, 4885.365591397848]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[99.81000000000002, 4735.614999999998]], "isOverall": false, "label": "HTTP Request - Resize-Aggregated", "isController": false}, {"data": [[53.0, 1739.0], [55.0, 1764.0], [54.0, 1764.0], [57.0, 1824.2], [59.0, 1854.0], [61.0, 1868.5], [60.0, 1853.0], [63.0, 1843.0], [62.0, 1887.0], [65.0, 1899.0], [64.0, 1900.0], [71.0, 1912.0], [70.0, 1860.0], [74.0, 2063.3333333333335], [76.0, 1871.1818181818182], [83.0, 1522.8], [82.0, 2098.0], [87.0, 1925.4444444444443], [86.0, 1666.3333333333333], [85.0, 2198.3333333333335], [84.0, 2175.0], [89.0, 1494.75], [88.0, 1418.5], [95.0, 2703.5], [94.0, 2637.0], [93.0, 953.75], [92.0, 435.0], [99.0, 803.3333333333333], [97.0, 243.0], [96.0, 277.0], [100.0, 2340.727272727273]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[91.145, 2078.954999999999]], "isOverall": false, "label": "HTTP Request - Filter-Aggregated", "isController": false}, {"data": [[2.0, 549.0], [3.0, 625.0], [4.0, 698.0], [6.0, 614.0], [9.0, 585.6666666666666], [10.0, 883.0], [11.0, 847.0], [12.0, 493.0], [13.0, 455.0], [15.0, 688.0], [16.0, 566.0], [17.0, 539.0], [18.0, 879.0], [19.0, 605.0], [20.0, 900.0], [22.0, 744.5], [23.0, 634.0], [24.0, 861.0], [25.0, 708.0], [26.0, 814.0], [27.0, 854.0], [28.0, 780.0], [30.0, 809.0], [31.0, 772.0], [33.0, 967.0], [32.0, 799.0], [34.0, 977.0], [37.0, 935.0], [36.0, 788.0], [38.0, 756.0], [41.0, 732.0], [40.0, 845.0], [43.0, 863.0], [42.0, 916.0], [45.0, 965.0], [44.0, 957.0], [47.0, 977.0], [46.0, 791.0], [49.0, 943.0], [48.0, 790.0], [51.0, 940.0], [50.0, 801.0], [53.0, 831.0], [52.0, 912.0], [55.0, 956.0], [54.0, 892.0], [57.0, 868.0], [56.0, 894.0], [59.0, 871.0], [58.0, 866.0], [61.0, 816.0], [60.0, 788.0], [63.0, 688.0], [62.0, 745.0], [67.0, 645.0], [66.0, 660.0], [65.0, 670.0], [64.0, 722.0], [71.0, 630.0], [70.0, 681.6666666666666], [75.0, 604.0], [74.0, 638.0], [73.0, 652.0], [72.0, 649.0], [79.0, 626.0], [78.0, 576.0], [77.0, 614.0], [76.0, 602.0], [83.0, 560.0], [82.0, 558.0], [81.0, 632.0], [80.0, 553.0], [87.0, 456.0], [86.0, 553.0], [85.0, 519.0], [84.0, 559.0], [91.0, 1543.5], [89.0, 450.0], [88.0, 469.0], [95.0, 442.0], [94.0, 436.0], [93.0, 429.0], [92.0, 489.0], [99.0, 162.0], [98.0, 203.0], [97.0, 228.0], [96.0, 297.0], [100.0, 2224.990099009901], [1.0, 493.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}, {"data": [[75.315, 1475.3199999999997]], "isOverall": false, "label": "HTTP Request - Composite-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 45310.25, "minX": 1.71094452E12, "maxY": 61843.75, "series": [{"data": [[1.71094458E12, 45310.25], [1.71094452E12, 61843.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71094458E12, 48951.53333333333], [1.71094452E12, 52898.46666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094458E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 722.7900000000001, "minX": 1.71094452E12, "maxY": 5710.76470588235, "series": [{"data": [[1.71094458E12, 2663.421875], [1.71094452E12, 5710.76470588235]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094458E12, 1769.2551020408162], [1.71094452E12, 2376.509803921569]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094458E12, 722.7900000000001], [1.71094452E12, 2227.85]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094458E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 719.81, "minX": 1.71094452E12, "maxY": 5709.080882352942, "series": [{"data": [[1.71094458E12, 2660.8125], [1.71094452E12, 5709.080882352942]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094458E12, 1768.6326530612243], [1.71094452E12, 2375.4117647058833]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094458E12, 719.81], [1.71094452E12, 2224.2500000000005]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094458E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71094452E12, "maxY": 2180.022058823529, "series": [{"data": [[1.71094458E12, 0.0], [1.71094452E12, 2180.022058823529]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094458E12, 0.0], [1.71094452E12, 0.0]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094458E12, 0.0], [1.71094452E12, 0.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094458E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 162.0, "minX": 1.71094452E12, "maxY": 8658.0, "series": [{"data": [[1.71094458E12, 2828.0], [1.71094452E12, 8658.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71094458E12, 2698.7], [1.71094452E12, 7289.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71094458E12, 2797.7], [1.71094452E12, 8475.69]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71094458E12, 2729.35], [1.71094452E12, 7811.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71094458E12, 162.0], [1.71094452E12, 1952.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71094458E12, 1853.5], [1.71094452E12, 2505.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094458E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 13.0, "maxY": 7164.0, "series": [{"data": [[34.0, 2504.0], [37.0, 2620.0], [40.0, 7164.0], [41.0, 2359.0], [80.0, 2437.5], [43.0, 2088.0], [92.0, 1822.0], [13.0, 5436.0], [53.0, 791.0], [54.0, 2497.5], [31.0, 6301.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[13.0, 29.0], [31.0, 27.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 13.0, "maxY": 7163.5, "series": [{"data": [[34.0, 2503.5], [37.0, 2615.0], [40.0, 7163.5], [41.0, 2357.0], [80.0, 2437.5], [43.0, 2078.0], [92.0, 1822.0], [13.0, 5426.5], [53.0, 787.0], [54.0, 2495.5], [31.0, 6299.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[13.0, 28.0], [31.0, 27.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.7, "minX": 1.71094452E12, "maxY": 7.3, "series": [{"data": [[1.71094458E12, 2.7], [1.71094452E12, 7.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094458E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71094452E12, "maxY": 5.6, "series": [{"data": [[1.71094458E12, 4.366666666666666], [1.71094452E12, 5.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71094452E12, 0.03333333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094458E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71094452E12, "maxY": 2.2666666666666666, "series": [{"data": [[1.71094452E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request - Filter-failure", "isController": false}, {"data": [[1.71094458E12, 1.6333333333333333], [1.71094452E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request - Filter-success", "isController": false}, {"data": [[1.71094458E12, 1.6666666666666667], [1.71094452E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request - Composite-success", "isController": false}, {"data": [[1.71094458E12, 1.0666666666666667], [1.71094452E12, 2.2666666666666666]], "isOverall": false, "label": "HTTP Request - Resize-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094458E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.71094452E12, "maxY": 5.6, "series": [{"data": [[1.71094458E12, 4.366666666666666], [1.71094452E12, 5.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71094452E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094458E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

