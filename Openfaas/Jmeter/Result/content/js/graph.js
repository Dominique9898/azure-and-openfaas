/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 546.0, "minX": 0.0, "maxY": 56150.0, "series": [{"data": [[0.0, 577.0], [0.1, 577.0], [0.2, 577.0], [0.3, 577.0], [0.4, 577.0], [0.5, 580.0], [0.6, 580.0], [0.7, 580.0], [0.8, 580.0], [0.9, 580.0], [1.0, 593.0], [1.1, 593.0], [1.2, 593.0], [1.3, 593.0], [1.4, 593.0], [1.5, 598.0], [1.6, 598.0], [1.7, 598.0], [1.8, 598.0], [1.9, 598.0], [2.0, 613.0], [2.1, 613.0], [2.2, 613.0], [2.3, 613.0], [2.4, 613.0], [2.5, 616.0], [2.6, 616.0], [2.7, 616.0], [2.8, 616.0], [2.9, 616.0], [3.0, 632.0], [3.1, 632.0], [3.2, 632.0], [3.3, 632.0], [3.4, 632.0], [3.5, 660.0], [3.6, 660.0], [3.7, 660.0], [3.8, 660.0], [3.9, 660.0], [4.0, 695.0], [4.1, 695.0], [4.2, 695.0], [4.3, 695.0], [4.4, 695.0], [4.5, 766.0], [4.6, 766.0], [4.7, 766.0], [4.8, 766.0], [4.9, 766.0], [5.0, 836.0], [5.1, 836.0], [5.2, 836.0], [5.3, 836.0], [5.4, 836.0], [5.5, 855.0], [5.6, 855.0], [5.7, 855.0], [5.8, 855.0], [5.9, 855.0], [6.0, 882.0], [6.1, 882.0], [6.2, 882.0], [6.3, 882.0], [6.4, 882.0], [6.5, 891.0], [6.6, 891.0], [6.7, 891.0], [6.8, 891.0], [6.9, 891.0], [7.0, 892.0], [7.1, 892.0], [7.2, 892.0], [7.3, 892.0], [7.4, 892.0], [7.5, 897.0], [7.6, 897.0], [7.7, 897.0], [7.8, 897.0], [7.9, 897.0], [8.0, 973.0], [8.1, 973.0], [8.2, 973.0], [8.3, 973.0], [8.4, 973.0], [8.5, 985.0], [8.6, 985.0], [8.7, 985.0], [8.8, 985.0], [8.9, 985.0], [9.0, 986.0], [9.1, 986.0], [9.2, 986.0], [9.3, 986.0], [9.4, 986.0], [9.5, 1011.0], [9.6, 1011.0], [9.7, 1011.0], [9.8, 1011.0], [9.9, 1011.0], [10.0, 1020.0], [10.1, 1020.0], [10.2, 1020.0], [10.3, 1020.0], [10.4, 1020.0], [10.5, 1045.0], [10.6, 1045.0], [10.7, 1045.0], [10.8, 1045.0], [10.9, 1045.0], [11.0, 1098.0], [11.1, 1098.0], [11.2, 1098.0], [11.3, 1098.0], [11.4, 1098.0], [11.5, 1120.0], [11.6, 1120.0], [11.7, 1120.0], [11.8, 1120.0], [11.9, 1120.0], [12.0, 1217.0], [12.1, 1217.0], [12.2, 1217.0], [12.3, 1217.0], [12.4, 1217.0], [12.5, 1489.0], [12.6, 1489.0], [12.7, 1489.0], [12.8, 1489.0], [12.9, 1489.0], [13.0, 1600.0], [13.1, 1600.0], [13.2, 1600.0], [13.3, 1600.0], [13.4, 1600.0], [13.5, 2005.0], [13.6, 2005.0], [13.7, 2005.0], [13.8, 2005.0], [13.9, 2005.0], [14.0, 2091.0], [14.1, 2091.0], [14.2, 2091.0], [14.3, 2091.0], [14.4, 2091.0], [14.5, 2323.0], [14.6, 2323.0], [14.7, 2323.0], [14.8, 2323.0], [14.9, 2323.0], [15.0, 2346.0], [15.1, 2346.0], [15.2, 2346.0], [15.3, 2346.0], [15.4, 2346.0], [15.5, 2351.0], [15.6, 2351.0], [15.7, 2351.0], [15.8, 2351.0], [15.9, 2351.0], [16.0, 2566.0], [16.1, 2566.0], [16.2, 2566.0], [16.3, 2566.0], [16.4, 2566.0], [16.5, 2641.0], [16.6, 2641.0], [16.7, 2641.0], [16.8, 2641.0], [16.9, 2641.0], [17.0, 2738.0], [17.1, 2738.0], [17.2, 2738.0], [17.3, 2738.0], [17.4, 2738.0], [17.5, 3281.0], [17.6, 3281.0], [17.7, 3281.0], [17.8, 3281.0], [17.9, 3281.0], [18.0, 3303.0], [18.1, 3303.0], [18.2, 3303.0], [18.3, 3303.0], [18.4, 3303.0], [18.5, 3431.0], [18.6, 3431.0], [18.7, 3431.0], [18.8, 3431.0], [18.9, 3431.0], [19.0, 3464.0], [19.1, 3464.0], [19.2, 3464.0], [19.3, 3464.0], [19.4, 3464.0], [19.5, 3975.0], [19.6, 3975.0], [19.7, 3975.0], [19.8, 3975.0], [19.9, 3975.0], [20.0, 5550.0], [20.1, 5550.0], [20.2, 5550.0], [20.3, 5550.0], [20.4, 5550.0], [20.5, 6893.0], [20.6, 6893.0], [20.7, 6893.0], [20.8, 6893.0], [20.9, 6893.0], [21.0, 7678.0], [21.1, 7678.0], [21.2, 7678.0], [21.3, 7678.0], [21.4, 7678.0], [21.5, 8038.0], [21.6, 8038.0], [21.7, 8038.0], [21.8, 8038.0], [21.9, 8038.0], [22.0, 10294.0], [22.1, 10294.0], [22.2, 10294.0], [22.3, 10294.0], [22.4, 10294.0], [22.5, 11187.0], [22.6, 11187.0], [22.7, 11187.0], [22.8, 11187.0], [22.9, 11187.0], [23.0, 16879.0], [23.1, 16879.0], [23.2, 16879.0], [23.3, 16879.0], [23.4, 16879.0], [23.5, 20865.0], [23.6, 20865.0], [23.7, 20865.0], [23.8, 20865.0], [23.9, 20865.0], [24.0, 22008.0], [24.1, 22008.0], [24.2, 22008.0], [24.3, 22008.0], [24.4, 22008.0], [24.5, 22473.0], [24.6, 22473.0], [24.7, 22473.0], [24.8, 22473.0], [24.9, 22473.0], [25.0, 23158.0], [25.1, 23158.0], [25.2, 23158.0], [25.3, 23158.0], [25.4, 23158.0], [25.5, 24140.0], [25.6, 24140.0], [25.7, 24140.0], [25.8, 24140.0], [25.9, 24140.0], [26.0, 24342.0], [26.1, 24342.0], [26.2, 24342.0], [26.3, 24342.0], [26.4, 24342.0], [26.5, 26274.0], [26.6, 26274.0], [26.7, 26274.0], [26.8, 26274.0], [26.9, 26274.0], [27.0, 26901.0], [27.1, 26901.0], [27.2, 26901.0], [27.3, 26901.0], [27.4, 26901.0], [27.5, 27178.0], [27.6, 27178.0], [27.7, 27178.0], [27.8, 27178.0], [27.9, 27178.0], [28.0, 27319.0], [28.1, 27319.0], [28.2, 27319.0], [28.3, 27319.0], [28.4, 27319.0], [28.5, 27329.0], [28.6, 27329.0], [28.7, 27329.0], [28.8, 27329.0], [28.9, 27329.0], [29.0, 27431.0], [29.1, 27431.0], [29.2, 27431.0], [29.3, 27431.0], [29.4, 27431.0], [29.5, 27503.0], [29.6, 27503.0], [29.7, 27503.0], [29.8, 27503.0], [29.9, 27503.0], [30.0, 27657.0], [30.1, 27657.0], [30.2, 27657.0], [30.3, 27657.0], [30.4, 27657.0], [30.5, 27903.0], [30.6, 27903.0], [30.7, 27903.0], [30.8, 27903.0], [30.9, 27903.0], [31.0, 27974.0], [31.1, 27974.0], [31.2, 27974.0], [31.3, 27974.0], [31.4, 27974.0], [31.5, 27995.0], [31.6, 27995.0], [31.7, 27995.0], [31.8, 27995.0], [31.9, 27995.0], [32.0, 28030.0], [32.1, 28030.0], [32.2, 28030.0], [32.3, 28030.0], [32.4, 28030.0], [32.5, 28102.0], [32.6, 28102.0], [32.7, 28102.0], [32.8, 28102.0], [32.9, 28102.0], [33.0, 28162.0], [33.1, 28162.0], [33.2, 28162.0], [33.3, 28162.0], [33.4, 28162.0], [33.5, 28193.0], [33.6, 28193.0], [33.7, 28193.0], [33.8, 28193.0], [33.9, 28193.0], [34.0, 28244.0], [34.1, 28244.0], [34.2, 28244.0], [34.3, 28244.0], [34.4, 28244.0], [34.5, 28257.0], [34.6, 28257.0], [34.7, 28257.0], [34.8, 28257.0], [34.9, 28257.0], [35.0, 28350.0], [35.1, 28350.0], [35.2, 28350.0], [35.3, 28350.0], [35.4, 28350.0], [35.5, 28434.0], [35.6, 28434.0], [35.7, 28434.0], [35.8, 28434.0], [35.9, 28434.0], [36.0, 28460.0], [36.1, 28460.0], [36.2, 28460.0], [36.3, 28460.0], [36.4, 28460.0], [36.5, 28465.0], [36.6, 28465.0], [36.7, 28465.0], [36.8, 28465.0], [36.9, 28465.0], [37.0, 28475.0], [37.1, 28475.0], [37.2, 28475.0], [37.3, 28475.0], [37.4, 28475.0], [37.5, 28529.0], [37.6, 28529.0], [37.7, 28529.0], [37.8, 28529.0], [37.9, 28529.0], [38.0, 28541.0], [38.1, 28541.0], [38.2, 28541.0], [38.3, 28541.0], [38.4, 28541.0], [38.5, 28586.0], [38.6, 28586.0], [38.7, 28586.0], [38.8, 28586.0], [38.9, 28586.0], [39.0, 28613.0], [39.1, 28613.0], [39.2, 28613.0], [39.3, 28613.0], [39.4, 28613.0], [39.5, 28639.0], [39.6, 28639.0], [39.7, 28639.0], [39.8, 28639.0], [39.9, 28639.0], [40.0, 28713.0], [40.1, 28713.0], [40.2, 28713.0], [40.3, 28713.0], [40.4, 28713.0], [40.5, 28718.0], [40.6, 28718.0], [40.7, 28718.0], [40.8, 28718.0], [40.9, 28718.0], [41.0, 28723.0], [41.1, 28723.0], [41.2, 28723.0], [41.3, 28723.0], [41.4, 28723.0], [41.5, 28743.0], [41.6, 28743.0], [41.7, 28743.0], [41.8, 28743.0], [41.9, 28743.0], [42.0, 28762.0], [42.1, 28762.0], [42.2, 28762.0], [42.3, 28762.0], [42.4, 28762.0], [42.5, 28771.0], [42.6, 28771.0], [42.7, 28771.0], [42.8, 28771.0], [42.9, 28771.0], [43.0, 28779.0], [43.1, 28779.0], [43.2, 28779.0], [43.3, 28779.0], [43.4, 28779.0], [43.5, 28801.0], [43.6, 28801.0], [43.7, 28801.0], [43.8, 28801.0], [43.9, 28801.0], [44.0, 28808.0], [44.1, 28808.0], [44.2, 28808.0], [44.3, 28808.0], [44.4, 28808.0], [44.5, 28820.0], [44.6, 28820.0], [44.7, 28820.0], [44.8, 28820.0], [44.9, 28820.0], [45.0, 28825.0], [45.1, 28825.0], [45.2, 28825.0], [45.3, 28825.0], [45.4, 28825.0], [45.5, 28855.0], [45.6, 28855.0], [45.7, 28855.0], [45.8, 28855.0], [45.9, 28855.0], [46.0, 28916.0], [46.1, 28916.0], [46.2, 28916.0], [46.3, 28916.0], [46.4, 28916.0], [46.5, 28919.0], [46.6, 28919.0], [46.7, 28919.0], [46.8, 28919.0], [46.9, 28919.0], [47.0, 28956.0], [47.1, 28956.0], [47.2, 28956.0], [47.3, 28956.0], [47.4, 28956.0], [47.5, 29105.0], [47.6, 29105.0], [47.7, 29105.0], [47.8, 29105.0], [47.9, 29105.0], [48.0, 29106.0], [48.1, 29106.0], [48.2, 29106.0], [48.3, 29106.0], [48.4, 29106.0], [48.5, 29334.0], [48.6, 29334.0], [48.7, 29334.0], [48.8, 29334.0], [48.9, 29334.0], [49.0, 29335.0], [49.1, 29335.0], [49.2, 29335.0], [49.3, 29335.0], [49.4, 29335.0], [49.5, 29343.0], [49.6, 29343.0], [49.7, 29343.0], [49.8, 29343.0], [49.9, 29343.0], [50.0, 46873.0], [50.1, 46873.0], [50.2, 46873.0], [50.3, 46873.0], [50.4, 46873.0], [50.5, 48058.0], [50.6, 48058.0], [50.7, 48058.0], [50.8, 48058.0], [50.9, 48058.0], [51.0, 48738.0], [51.1, 48738.0], [51.2, 48738.0], [51.3, 48738.0], [51.4, 48738.0], [51.5, 49587.0], [51.6, 49587.0], [51.7, 49587.0], [51.8, 49587.0], [51.9, 49587.0], [52.0, 50017.0], [52.1, 50017.0], [52.2, 50017.0], [52.3, 50017.0], [52.4, 50017.0], [52.5, 50099.0], [52.6, 50099.0], [52.7, 50099.0], [52.8, 50099.0], [52.9, 50099.0], [53.0, 50429.0], [53.1, 50429.0], [53.2, 50429.0], [53.3, 50429.0], [53.4, 50429.0], [53.5, 50469.0], [53.6, 50469.0], [53.7, 50469.0], [53.8, 50469.0], [53.9, 50469.0], [54.0, 50532.0], [54.1, 50532.0], [54.2, 50532.0], [54.3, 50532.0], [54.4, 50532.0], [54.5, 50541.0], [54.6, 50541.0], [54.7, 50541.0], [54.8, 50541.0], [54.9, 50541.0], [55.0, 50549.0], [55.1, 50549.0], [55.2, 50549.0], [55.3, 50549.0], [55.4, 50549.0], [55.5, 50682.0], [55.6, 50682.0], [55.7, 50682.0], [55.8, 50682.0], [55.9, 50682.0], [56.0, 50840.0], [56.1, 50840.0], [56.2, 50840.0], [56.3, 50840.0], [56.4, 50840.0], [56.5, 50963.0], [56.6, 50963.0], [56.7, 50963.0], [56.8, 50963.0], [56.9, 50963.0], [57.0, 51079.0], [57.1, 51079.0], [57.2, 51079.0], [57.3, 51079.0], [57.4, 51079.0], [57.5, 51343.0], [57.6, 51343.0], [57.7, 51343.0], [57.8, 51343.0], [57.9, 51343.0], [58.0, 51655.0], [58.1, 51655.0], [58.2, 51655.0], [58.3, 51655.0], [58.4, 51655.0], [58.5, 51762.0], [58.6, 51762.0], [58.7, 51762.0], [58.8, 51762.0], [58.9, 51762.0], [59.0, 51874.0], [59.1, 51874.0], [59.2, 51874.0], [59.3, 51874.0], [59.4, 51874.0], [59.5, 51875.0], [59.6, 51875.0], [59.7, 51875.0], [59.8, 51875.0], [59.9, 51875.0], [60.0, 51920.0], [60.1, 51920.0], [60.2, 51920.0], [60.3, 51920.0], [60.4, 51920.0], [60.5, 51999.0], [60.6, 51999.0], [60.7, 51999.0], [60.8, 51999.0], [60.9, 51999.0], [61.0, 52144.0], [61.1, 52144.0], [61.2, 52144.0], [61.3, 52144.0], [61.4, 52144.0], [61.5, 52192.0], [61.6, 52192.0], [61.7, 52192.0], [61.8, 52192.0], [61.9, 52192.0], [62.0, 52200.0], [62.1, 52200.0], [62.2, 52200.0], [62.3, 52200.0], [62.4, 52200.0], [62.5, 52337.0], [62.6, 52337.0], [62.7, 52337.0], [62.8, 52337.0], [62.9, 52337.0], [63.0, 52423.0], [63.1, 52423.0], [63.2, 52423.0], [63.3, 52423.0], [63.4, 52423.0], [63.5, 52550.0], [63.6, 52550.0], [63.7, 52550.0], [63.8, 52550.0], [63.9, 52550.0], [64.0, 52591.0], [64.1, 52591.0], [64.2, 52591.0], [64.3, 52591.0], [64.4, 52591.0], [64.5, 52926.0], [64.6, 52926.0], [64.7, 52926.0], [64.8, 52926.0], [64.9, 52926.0], [65.0, 53045.0], [65.1, 53045.0], [65.2, 53045.0], [65.3, 53045.0], [65.4, 53045.0], [65.5, 53095.0], [65.6, 53095.0], [65.7, 53095.0], [65.8, 53095.0], [65.9, 53095.0], [66.0, 53123.0], [66.1, 53123.0], [66.2, 53123.0], [66.3, 53123.0], [66.4, 53123.0], [66.5, 53123.0], [66.6, 53123.0], [66.7, 53123.0], [66.8, 53123.0], [66.9, 53123.0], [67.0, 53158.0], [67.1, 53158.0], [67.2, 53158.0], [67.3, 53158.0], [67.4, 53158.0], [67.5, 53166.0], [67.6, 53166.0], [67.7, 53166.0], [67.8, 53166.0], [67.9, 53166.0], [68.0, 53272.0], [68.1, 53272.0], [68.2, 53272.0], [68.3, 53272.0], [68.4, 53272.0], [68.5, 53276.0], [68.6, 53276.0], [68.7, 53276.0], [68.8, 53276.0], [68.9, 53276.0], [69.0, 53383.0], [69.1, 53383.0], [69.2, 53383.0], [69.3, 53383.0], [69.4, 53383.0], [69.5, 53435.0], [69.6, 53435.0], [69.7, 53435.0], [69.8, 53435.0], [69.9, 53435.0], [70.0, 53607.0], [70.1, 53607.0], [70.2, 53607.0], [70.3, 53607.0], [70.4, 53607.0], [70.5, 53631.0], [70.6, 53631.0], [70.7, 53631.0], [70.8, 53631.0], [70.9, 53631.0], [71.0, 53635.0], [71.1, 53635.0], [71.2, 53635.0], [71.3, 53635.0], [71.4, 53635.0], [71.5, 53669.0], [71.6, 53669.0], [71.7, 53669.0], [71.8, 53669.0], [71.9, 53669.0], [72.0, 53714.0], [72.1, 53714.0], [72.2, 53714.0], [72.3, 53714.0], [72.4, 53714.0], [72.5, 53740.0], [72.6, 53740.0], [72.7, 53740.0], [72.8, 53740.0], [72.9, 53740.0], [73.0, 53816.0], [73.1, 53816.0], [73.2, 53816.0], [73.3, 53816.0], [73.4, 53816.0], [73.5, 53850.0], [73.6, 53850.0], [73.7, 53850.0], [73.8, 53850.0], [73.9, 53850.0], [74.0, 53983.0], [74.1, 53983.0], [74.2, 53983.0], [74.3, 53983.0], [74.4, 53983.0], [74.5, 54107.0], [74.6, 54107.0], [74.7, 54107.0], [74.8, 54107.0], [74.9, 54107.0], [75.0, 54137.0], [75.1, 54137.0], [75.2, 54137.0], [75.3, 54137.0], [75.4, 54137.0], [75.5, 54204.0], [75.6, 54204.0], [75.7, 54204.0], [75.8, 54204.0], [75.9, 54204.0], [76.0, 54260.0], [76.1, 54260.0], [76.2, 54260.0], [76.3, 54260.0], [76.4, 54260.0], [76.5, 54287.0], [76.6, 54287.0], [76.7, 54287.0], [76.8, 54287.0], [76.9, 54287.0], [77.0, 54318.0], [77.1, 54318.0], [77.2, 54318.0], [77.3, 54318.0], [77.4, 54318.0], [77.5, 54335.0], [77.6, 54335.0], [77.7, 54335.0], [77.8, 54335.0], [77.9, 54335.0], [78.0, 54352.0], [78.1, 54352.0], [78.2, 54352.0], [78.3, 54352.0], [78.4, 54352.0], [78.5, 54419.0], [78.6, 54419.0], [78.7, 54419.0], [78.8, 54419.0], [78.9, 54419.0], [79.0, 54487.0], [79.1, 54487.0], [79.2, 54487.0], [79.3, 54487.0], [79.4, 54487.0], [79.5, 54562.0], [79.6, 54562.0], [79.7, 54562.0], [79.8, 54562.0], [79.9, 54562.0], [80.0, 54572.0], [80.1, 54572.0], [80.2, 54572.0], [80.3, 54572.0], [80.4, 54572.0], [80.5, 54581.0], [80.6, 54581.0], [80.7, 54581.0], [80.8, 54581.0], [80.9, 54581.0], [81.0, 54699.0], [81.1, 54699.0], [81.2, 54699.0], [81.3, 54699.0], [81.4, 54699.0], [81.5, 54718.0], [81.6, 54718.0], [81.7, 54718.0], [81.8, 54718.0], [81.9, 54718.0], [82.0, 54739.0], [82.1, 54739.0], [82.2, 54739.0], [82.3, 54739.0], [82.4, 54739.0], [82.5, 54752.0], [82.6, 54752.0], [82.7, 54752.0], [82.8, 54752.0], [82.9, 54752.0], [83.0, 54763.0], [83.1, 54763.0], [83.2, 54763.0], [83.3, 54763.0], [83.4, 54763.0], [83.5, 54841.0], [83.6, 54841.0], [83.7, 54841.0], [83.8, 54841.0], [83.9, 54841.0], [84.0, 54877.0], [84.1, 54877.0], [84.2, 54877.0], [84.3, 54877.0], [84.4, 54877.0], [84.5, 54881.0], [84.6, 54881.0], [84.7, 54881.0], [84.8, 54881.0], [84.9, 54881.0], [85.0, 55005.0], [85.1, 55005.0], [85.2, 55005.0], [85.3, 55005.0], [85.4, 55005.0], [85.5, 55010.0], [85.6, 55010.0], [85.7, 55010.0], [85.8, 55010.0], [85.9, 55010.0], [86.0, 55073.0], [86.1, 55073.0], [86.2, 55073.0], [86.3, 55073.0], [86.4, 55073.0], [86.5, 55096.0], [86.6, 55096.0], [86.7, 55096.0], [86.8, 55096.0], [86.9, 55096.0], [87.0, 55110.0], [87.1, 55110.0], [87.2, 55110.0], [87.3, 55110.0], [87.4, 55110.0], [87.5, 55139.0], [87.6, 55139.0], [87.7, 55139.0], [87.8, 55139.0], [87.9, 55139.0], [88.0, 55193.0], [88.1, 55193.0], [88.2, 55193.0], [88.3, 55193.0], [88.4, 55193.0], [88.5, 55203.0], [88.6, 55203.0], [88.7, 55203.0], [88.8, 55203.0], [88.9, 55203.0], [89.0, 55204.0], [89.1, 55204.0], [89.2, 55204.0], [89.3, 55204.0], [89.4, 55204.0], [89.5, 55205.0], [89.6, 55205.0], [89.7, 55205.0], [89.8, 55205.0], [89.9, 55205.0], [90.0, 55205.0], [90.1, 55205.0], [90.2, 55205.0], [90.3, 55205.0], [90.4, 55205.0], [90.5, 55224.0], [90.6, 55224.0], [90.7, 55224.0], [90.8, 55224.0], [90.9, 55224.0], [91.0, 55228.0], [91.1, 55228.0], [91.2, 55228.0], [91.3, 55228.0], [91.4, 55228.0], [91.5, 55240.0], [91.6, 55240.0], [91.7, 55240.0], [91.8, 55240.0], [91.9, 55240.0], [92.0, 55248.0], [92.1, 55248.0], [92.2, 55248.0], [92.3, 55248.0], [92.4, 55248.0], [92.5, 55254.0], [92.6, 55254.0], [92.7, 55254.0], [92.8, 55254.0], [92.9, 55254.0], [93.0, 55290.0], [93.1, 55290.0], [93.2, 55290.0], [93.3, 55290.0], [93.4, 55290.0], [93.5, 55293.0], [93.6, 55293.0], [93.7, 55293.0], [93.8, 55293.0], [93.9, 55293.0], [94.0, 55343.0], [94.1, 55343.0], [94.2, 55343.0], [94.3, 55343.0], [94.4, 55343.0], [94.5, 55369.0], [94.6, 55369.0], [94.7, 55369.0], [94.8, 55369.0], [94.9, 55369.0], [95.0, 55378.0], [95.1, 55378.0], [95.2, 55378.0], [95.3, 55378.0], [95.4, 55378.0], [95.5, 55383.0], [95.6, 55383.0], [95.7, 55383.0], [95.8, 55383.0], [95.9, 55383.0], [96.0, 55392.0], [96.1, 55392.0], [96.2, 55392.0], [96.3, 55392.0], [96.4, 55392.0], [96.5, 55435.0], [96.6, 55435.0], [96.7, 55435.0], [96.8, 55435.0], [96.9, 55435.0], [97.0, 55515.0], [97.1, 55515.0], [97.2, 55515.0], [97.3, 55515.0], [97.4, 55515.0], [97.5, 55539.0], [97.6, 55539.0], [97.7, 55539.0], [97.8, 55539.0], [97.9, 55539.0], [98.0, 55556.0], [98.1, 55556.0], [98.2, 55556.0], [98.3, 55556.0], [98.4, 55556.0], [98.5, 55568.0], [98.6, 55568.0], [98.7, 55568.0], [98.8, 55568.0], [98.9, 55568.0], [99.0, 55585.0], [99.1, 55585.0], [99.2, 55585.0], [99.3, 55585.0], [99.4, 55585.0], [99.5, 56150.0], [99.6, 56150.0], [99.7, 56150.0], [99.8, 56150.0], [99.9, 56150.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[0.0, 546.0], [0.1, 546.0], [0.2, 546.0], [0.3, 546.0], [0.4, 546.0], [0.5, 553.0], [0.6, 553.0], [0.7, 553.0], [0.8, 553.0], [0.9, 553.0], [1.0, 572.0], [1.1, 572.0], [1.2, 572.0], [1.3, 572.0], [1.4, 572.0], [1.5, 607.0], [1.6, 607.0], [1.7, 607.0], [1.8, 607.0], [1.9, 607.0], [2.0, 613.0], [2.1, 613.0], [2.2, 613.0], [2.3, 613.0], [2.4, 613.0], [2.5, 640.0], [2.6, 640.0], [2.7, 640.0], [2.8, 640.0], [2.9, 640.0], [3.0, 649.0], [3.1, 649.0], [3.2, 649.0], [3.3, 649.0], [3.4, 649.0], [3.5, 671.0], [3.6, 671.0], [3.7, 671.0], [3.8, 671.0], [3.9, 671.0], [4.0, 678.0], [4.1, 678.0], [4.2, 678.0], [4.3, 678.0], [4.4, 678.0], [4.5, 808.0], [4.6, 808.0], [4.7, 808.0], [4.8, 808.0], [4.9, 808.0], [5.0, 825.0], [5.1, 825.0], [5.2, 825.0], [5.3, 825.0], [5.4, 825.0], [5.5, 854.0], [5.6, 854.0], [5.7, 854.0], [5.8, 854.0], [5.9, 854.0], [6.0, 887.0], [6.1, 887.0], [6.2, 887.0], [6.3, 887.0], [6.4, 887.0], [6.5, 916.0], [6.6, 916.0], [6.7, 916.0], [6.8, 916.0], [6.9, 916.0], [7.0, 918.0], [7.1, 918.0], [7.2, 918.0], [7.3, 918.0], [7.4, 918.0], [7.5, 930.0], [7.6, 930.0], [7.7, 930.0], [7.8, 930.0], [7.9, 930.0], [8.0, 981.0], [8.1, 981.0], [8.2, 981.0], [8.3, 981.0], [8.4, 981.0], [8.5, 1040.0], [8.6, 1040.0], [8.7, 1040.0], [8.8, 1040.0], [8.9, 1040.0], [9.0, 1053.0], [9.1, 1053.0], [9.2, 1053.0], [9.3, 1053.0], [9.4, 1053.0], [9.5, 1170.0], [9.6, 1170.0], [9.7, 1170.0], [9.8, 1170.0], [9.9, 1170.0], [10.0, 1353.0], [10.1, 1353.0], [10.2, 1353.0], [10.3, 1353.0], [10.4, 1353.0], [10.5, 1356.0], [10.6, 1356.0], [10.7, 1356.0], [10.8, 1356.0], [10.9, 1356.0], [11.0, 1401.0], [11.1, 1401.0], [11.2, 1401.0], [11.3, 1401.0], [11.4, 1401.0], [11.5, 1472.0], [11.6, 1472.0], [11.7, 1472.0], [11.8, 1472.0], [11.9, 1472.0], [12.0, 1547.0], [12.1, 1547.0], [12.2, 1547.0], [12.3, 1547.0], [12.4, 1547.0], [12.5, 1574.0], [12.6, 1574.0], [12.7, 1574.0], [12.8, 1574.0], [12.9, 1574.0], [13.0, 1740.0], [13.1, 1740.0], [13.2, 1740.0], [13.3, 1740.0], [13.4, 1740.0], [13.5, 2634.0], [13.6, 2634.0], [13.7, 2634.0], [13.8, 2634.0], [13.9, 2634.0], [14.0, 2735.0], [14.1, 2735.0], [14.2, 2735.0], [14.3, 2735.0], [14.4, 2735.0], [14.5, 2860.0], [14.6, 2860.0], [14.7, 2860.0], [14.8, 2860.0], [14.9, 2860.0], [15.0, 2867.0], [15.1, 2867.0], [15.2, 2867.0], [15.3, 2867.0], [15.4, 2867.0], [15.5, 2956.0], [15.6, 2956.0], [15.7, 2956.0], [15.8, 2956.0], [15.9, 2956.0], [16.0, 3411.0], [16.1, 3411.0], [16.2, 3411.0], [16.3, 3411.0], [16.4, 3411.0], [16.5, 3885.0], [16.6, 3885.0], [16.7, 3885.0], [16.8, 3885.0], [16.9, 3885.0], [17.0, 6730.0], [17.1, 6730.0], [17.2, 6730.0], [17.3, 6730.0], [17.4, 6730.0], [17.5, 7856.0], [17.6, 7856.0], [17.7, 7856.0], [17.8, 7856.0], [17.9, 7856.0], [18.0, 8012.0], [18.1, 8012.0], [18.2, 8012.0], [18.3, 8012.0], [18.4, 8012.0], [18.5, 8295.0], [18.6, 8295.0], [18.7, 8295.0], [18.8, 8295.0], [18.9, 8295.0], [19.0, 9220.0], [19.1, 9220.0], [19.2, 9220.0], [19.3, 9220.0], [19.4, 9220.0], [19.5, 9992.0], [19.6, 9992.0], [19.7, 9992.0], [19.8, 9992.0], [19.9, 9992.0], [20.0, 10018.0], [20.1, 10018.0], [20.2, 10018.0], [20.3, 10018.0], [20.4, 10018.0], [20.5, 12627.0], [20.6, 12627.0], [20.7, 12627.0], [20.8, 12627.0], [20.9, 12627.0], [21.0, 12680.0], [21.1, 12680.0], [21.2, 12680.0], [21.3, 12680.0], [21.4, 12680.0], [21.5, 13168.0], [21.6, 13168.0], [21.7, 13168.0], [21.8, 13168.0], [21.9, 13168.0], [22.0, 13686.0], [22.1, 13686.0], [22.2, 13686.0], [22.3, 13686.0], [22.4, 13686.0], [22.5, 14902.0], [22.6, 14902.0], [22.7, 14902.0], [22.8, 14902.0], [22.9, 14902.0], [23.0, 15014.0], [23.1, 15014.0], [23.2, 15014.0], [23.3, 15014.0], [23.4, 15014.0], [23.5, 15031.0], [23.6, 15031.0], [23.7, 15031.0], [23.8, 15031.0], [23.9, 15031.0], [24.0, 15124.0], [24.1, 15124.0], [24.2, 15124.0], [24.3, 15124.0], [24.4, 15124.0], [24.5, 15155.0], [24.6, 15155.0], [24.7, 15155.0], [24.8, 15155.0], [24.9, 15155.0], [25.0, 15215.0], [25.1, 15215.0], [25.2, 15215.0], [25.3, 15215.0], [25.4, 15215.0], [25.5, 15264.0], [25.6, 15264.0], [25.7, 15264.0], [25.8, 15264.0], [25.9, 15264.0], [26.0, 15279.0], [26.1, 15279.0], [26.2, 15279.0], [26.3, 15279.0], [26.4, 15279.0], [26.5, 15290.0], [26.6, 15290.0], [26.7, 15290.0], [26.8, 15290.0], [26.9, 15290.0], [27.0, 15298.0], [27.1, 15298.0], [27.2, 15298.0], [27.3, 15298.0], [27.4, 15298.0], [27.5, 15315.0], [27.6, 15315.0], [27.7, 15315.0], [27.8, 15315.0], [27.9, 15315.0], [28.0, 15357.0], [28.1, 15357.0], [28.2, 15357.0], [28.3, 15357.0], [28.4, 15357.0], [28.5, 15367.0], [28.6, 15367.0], [28.7, 15367.0], [28.8, 15367.0], [28.9, 15367.0], [29.0, 15372.0], [29.1, 15372.0], [29.2, 15372.0], [29.3, 15372.0], [29.4, 15372.0], [29.5, 15410.0], [29.6, 15410.0], [29.7, 15410.0], [29.8, 15410.0], [29.9, 15410.0], [30.0, 15418.0], [30.1, 15418.0], [30.2, 15418.0], [30.3, 15418.0], [30.4, 15418.0], [30.5, 15427.0], [30.6, 15427.0], [30.7, 15427.0], [30.8, 15427.0], [30.9, 15427.0], [31.0, 15430.0], [31.1, 15430.0], [31.2, 15430.0], [31.3, 15430.0], [31.4, 15430.0], [31.5, 15459.0], [31.6, 15459.0], [31.7, 15459.0], [31.8, 15459.0], [31.9, 15459.0], [32.0, 15461.0], [32.1, 15461.0], [32.2, 15461.0], [32.3, 15461.0], [32.4, 15461.0], [32.5, 15521.0], [32.6, 15521.0], [32.7, 15521.0], [32.8, 15521.0], [32.9, 15521.0], [33.0, 15543.0], [33.1, 15543.0], [33.2, 15543.0], [33.3, 15543.0], [33.4, 15543.0], [33.5, 15579.0], [33.6, 15579.0], [33.7, 15579.0], [33.8, 15579.0], [33.9, 15579.0], [34.0, 15595.0], [34.1, 15595.0], [34.2, 15595.0], [34.3, 15595.0], [34.4, 15595.0], [34.5, 15622.0], [34.6, 15622.0], [34.7, 15622.0], [34.8, 15622.0], [34.9, 15622.0], [35.0, 15666.0], [35.1, 15666.0], [35.2, 15666.0], [35.3, 15666.0], [35.4, 15666.0], [35.5, 15678.0], [35.6, 15678.0], [35.7, 15678.0], [35.8, 15678.0], [35.9, 15678.0], [36.0, 15755.0], [36.1, 15755.0], [36.2, 15755.0], [36.3, 15755.0], [36.4, 15755.0], [36.5, 15789.0], [36.6, 15789.0], [36.7, 15789.0], [36.8, 15789.0], [36.9, 15789.0], [37.0, 15797.0], [37.1, 15797.0], [37.2, 15797.0], [37.3, 15797.0], [37.4, 15797.0], [37.5, 15816.0], [37.6, 15816.0], [37.7, 15816.0], [37.8, 15816.0], [37.9, 15816.0], [38.0, 15991.0], [38.1, 15991.0], [38.2, 15991.0], [38.3, 15991.0], [38.4, 15991.0], [38.5, 16041.0], [38.6, 16041.0], [38.7, 16041.0], [38.8, 16041.0], [38.9, 16041.0], [39.0, 16091.0], [39.1, 16091.0], [39.2, 16091.0], [39.3, 16091.0], [39.4, 16091.0], [39.5, 16161.0], [39.6, 16161.0], [39.7, 16161.0], [39.8, 16161.0], [39.9, 16161.0], [40.0, 16177.0], [40.1, 16177.0], [40.2, 16177.0], [40.3, 16177.0], [40.4, 16177.0], [40.5, 16294.0], [40.6, 16294.0], [40.7, 16294.0], [40.8, 16294.0], [40.9, 16294.0], [41.0, 16299.0], [41.1, 16299.0], [41.2, 16299.0], [41.3, 16299.0], [41.4, 16299.0], [41.5, 16423.0], [41.6, 16423.0], [41.7, 16423.0], [41.8, 16423.0], [41.9, 16423.0], [42.0, 17221.0], [42.1, 17221.0], [42.2, 17221.0], [42.3, 17221.0], [42.4, 17221.0], [42.5, 19408.0], [42.6, 19408.0], [42.7, 19408.0], [42.8, 19408.0], [42.9, 19408.0], [43.0, 19501.0], [43.1, 19501.0], [43.2, 19501.0], [43.3, 19501.0], [43.4, 19501.0], [43.5, 20429.0], [43.6, 20429.0], [43.7, 20429.0], [43.8, 20429.0], [43.9, 20429.0], [44.0, 25501.0], [44.1, 25501.0], [44.2, 25501.0], [44.3, 25501.0], [44.4, 25501.0], [44.5, 26012.0], [44.6, 26012.0], [44.7, 26012.0], [44.8, 26012.0], [44.9, 26012.0], [45.0, 26440.0], [45.1, 26440.0], [45.2, 26440.0], [45.3, 26440.0], [45.4, 26440.0], [45.5, 27171.0], [45.6, 27171.0], [45.7, 27171.0], [45.8, 27171.0], [45.9, 27171.0], [46.0, 27855.0], [46.1, 27855.0], [46.2, 27855.0], [46.3, 27855.0], [46.4, 27855.0], [46.5, 28775.0], [46.6, 28775.0], [46.7, 28775.0], [46.8, 28775.0], [46.9, 28775.0], [47.0, 29160.0], [47.1, 29160.0], [47.2, 29160.0], [47.3, 29160.0], [47.4, 29160.0], [47.5, 29577.0], [47.6, 29577.0], [47.7, 29577.0], [47.8, 29577.0], [47.9, 29577.0], [48.0, 30677.0], [48.1, 30677.0], [48.2, 30677.0], [48.3, 30677.0], [48.4, 30677.0], [48.5, 30935.0], [48.6, 30935.0], [48.7, 30935.0], [48.8, 30935.0], [48.9, 30935.0], [49.0, 31057.0], [49.1, 31057.0], [49.2, 31057.0], [49.3, 31057.0], [49.4, 31057.0], [49.5, 31214.0], [49.6, 31214.0], [49.7, 31214.0], [49.8, 31214.0], [49.9, 31214.0], [50.0, 32724.0], [50.1, 32724.0], [50.2, 32724.0], [50.3, 32724.0], [50.4, 32724.0], [50.5, 32777.0], [50.6, 32777.0], [50.7, 32777.0], [50.8, 32777.0], [50.9, 32777.0], [51.0, 33416.0], [51.1, 33416.0], [51.2, 33416.0], [51.3, 33416.0], [51.4, 33416.0], [51.5, 33438.0], [51.6, 33438.0], [51.7, 33438.0], [51.8, 33438.0], [51.9, 33438.0], [52.0, 35100.0], [52.1, 35100.0], [52.2, 35100.0], [52.3, 35100.0], [52.4, 35100.0], [52.5, 35259.0], [52.6, 35259.0], [52.7, 35259.0], [52.8, 35259.0], [52.9, 35259.0], [53.0, 35427.0], [53.1, 35427.0], [53.2, 35427.0], [53.3, 35427.0], [53.4, 35427.0], [53.5, 35782.0], [53.6, 35782.0], [53.7, 35782.0], [53.8, 35782.0], [53.9, 35782.0], [54.0, 36415.0], [54.1, 36415.0], [54.2, 36415.0], [54.3, 36415.0], [54.4, 36415.0], [54.5, 36809.0], [54.6, 36809.0], [54.7, 36809.0], [54.8, 36809.0], [54.9, 36809.0], [55.0, 36832.0], [55.1, 36832.0], [55.2, 36832.0], [55.3, 36832.0], [55.4, 36832.0], [55.5, 38154.0], [55.6, 38154.0], [55.7, 38154.0], [55.8, 38154.0], [55.9, 38154.0], [56.0, 38225.0], [56.1, 38225.0], [56.2, 38225.0], [56.3, 38225.0], [56.4, 38225.0], [56.5, 38739.0], [56.6, 38739.0], [56.7, 38739.0], [56.8, 38739.0], [56.9, 38739.0], [57.0, 39044.0], [57.1, 39044.0], [57.2, 39044.0], [57.3, 39044.0], [57.4, 39044.0], [57.5, 39493.0], [57.6, 39493.0], [57.7, 39493.0], [57.8, 39493.0], [57.9, 39493.0], [58.0, 40566.0], [58.1, 40566.0], [58.2, 40566.0], [58.3, 40566.0], [58.4, 40566.0], [58.5, 41869.0], [58.6, 41869.0], [58.7, 41869.0], [58.8, 41869.0], [58.9, 41869.0], [59.0, 42166.0], [59.1, 42166.0], [59.2, 42166.0], [59.3, 42166.0], [59.4, 42166.0], [59.5, 42329.0], [59.6, 42329.0], [59.7, 42329.0], [59.8, 42329.0], [59.9, 42329.0], [60.0, 42655.0], [60.1, 42655.0], [60.2, 42655.0], [60.3, 42655.0], [60.4, 42655.0], [60.5, 43596.0], [60.6, 43596.0], [60.7, 43596.0], [60.8, 43596.0], [60.9, 43596.0], [61.0, 44063.0], [61.1, 44063.0], [61.2, 44063.0], [61.3, 44063.0], [61.4, 44063.0], [61.5, 46123.0], [61.6, 46123.0], [61.7, 46123.0], [61.8, 46123.0], [61.9, 46123.0], [62.0, 47686.0], [62.1, 47686.0], [62.2, 47686.0], [62.3, 47686.0], [62.4, 47686.0], [62.5, 47929.0], [62.6, 47929.0], [62.7, 47929.0], [62.8, 47929.0], [62.9, 47929.0], [63.0, 48250.0], [63.1, 48250.0], [63.2, 48250.0], [63.3, 48250.0], [63.4, 48250.0], [63.5, 48743.0], [63.6, 48743.0], [63.7, 48743.0], [63.8, 48743.0], [63.9, 48743.0], [64.0, 48821.0], [64.1, 48821.0], [64.2, 48821.0], [64.3, 48821.0], [64.4, 48821.0], [64.5, 48957.0], [64.6, 48957.0], [64.7, 48957.0], [64.8, 48957.0], [64.9, 48957.0], [65.0, 49012.0], [65.1, 49012.0], [65.2, 49012.0], [65.3, 49012.0], [65.4, 49012.0], [65.5, 49273.0], [65.6, 49273.0], [65.7, 49273.0], [65.8, 49273.0], [65.9, 49273.0], [66.0, 49333.0], [66.1, 49333.0], [66.2, 49333.0], [66.3, 49333.0], [66.4, 49333.0], [66.5, 49609.0], [66.6, 49609.0], [66.7, 49609.0], [66.8, 49609.0], [66.9, 49609.0], [67.0, 49634.0], [67.1, 49634.0], [67.2, 49634.0], [67.3, 49634.0], [67.4, 49634.0], [67.5, 49779.0], [67.6, 49779.0], [67.7, 49779.0], [67.8, 49779.0], [67.9, 49779.0], [68.0, 49843.0], [68.1, 49843.0], [68.2, 49843.0], [68.3, 49843.0], [68.4, 49843.0], [68.5, 49910.0], [68.6, 49910.0], [68.7, 49910.0], [68.8, 49910.0], [68.9, 49910.0], [69.0, 50045.0], [69.1, 50045.0], [69.2, 50045.0], [69.3, 50045.0], [69.4, 50045.0], [69.5, 50051.0], [69.6, 50051.0], [69.7, 50051.0], [69.8, 50051.0], [69.9, 50051.0], [70.0, 50052.0], [70.1, 50052.0], [70.2, 50052.0], [70.3, 50052.0], [70.4, 50052.0], [70.5, 50074.0], [70.6, 50074.0], [70.7, 50074.0], [70.8, 50074.0], [70.9, 50074.0], [71.0, 50090.0], [71.1, 50090.0], [71.2, 50090.0], [71.3, 50090.0], [71.4, 50090.0], [71.5, 50096.0], [71.6, 50096.0], [71.7, 50096.0], [71.8, 50096.0], [71.9, 50096.0], [72.0, 50125.0], [72.1, 50125.0], [72.2, 50125.0], [72.3, 50125.0], [72.4, 50125.0], [72.5, 50136.0], [72.6, 50136.0], [72.7, 50136.0], [72.8, 50136.0], [72.9, 50136.0], [73.0, 50157.0], [73.1, 50157.0], [73.2, 50157.0], [73.3, 50157.0], [73.4, 50157.0], [73.5, 50169.0], [73.6, 50169.0], [73.7, 50169.0], [73.8, 50169.0], [73.9, 50169.0], [74.0, 50241.0], [74.1, 50241.0], [74.2, 50241.0], [74.3, 50241.0], [74.4, 50241.0], [74.5, 50358.0], [74.6, 50358.0], [74.7, 50358.0], [74.8, 50358.0], [74.9, 50358.0], [75.0, 50387.0], [75.1, 50387.0], [75.2, 50387.0], [75.3, 50387.0], [75.4, 50387.0], [75.5, 50416.0], [75.6, 50416.0], [75.7, 50416.0], [75.8, 50416.0], [75.9, 50416.0], [76.0, 50529.0], [76.1, 50529.0], [76.2, 50529.0], [76.3, 50529.0], [76.4, 50529.0], [76.5, 50532.0], [76.6, 50532.0], [76.7, 50532.0], [76.8, 50532.0], [76.9, 50532.0], [77.0, 50585.0], [77.1, 50585.0], [77.2, 50585.0], [77.3, 50585.0], [77.4, 50585.0], [77.5, 50589.0], [77.6, 50589.0], [77.7, 50589.0], [77.8, 50589.0], [77.9, 50589.0], [78.0, 50596.0], [78.1, 50596.0], [78.2, 50596.0], [78.3, 50596.0], [78.4, 50596.0], [78.5, 50598.0], [78.6, 50598.0], [78.7, 50598.0], [78.8, 50598.0], [78.9, 50598.0], [79.0, 50601.0], [79.1, 50601.0], [79.2, 50601.0], [79.3, 50601.0], [79.4, 50601.0], [79.5, 50646.0], [79.6, 50646.0], [79.7, 50646.0], [79.8, 50646.0], [79.9, 50646.0], [80.0, 50658.0], [80.1, 50658.0], [80.2, 50658.0], [80.3, 50658.0], [80.4, 50658.0], [80.5, 50670.0], [80.6, 50670.0], [80.7, 50670.0], [80.8, 50670.0], [80.9, 50670.0], [81.0, 50737.0], [81.1, 50737.0], [81.2, 50737.0], [81.3, 50737.0], [81.4, 50737.0], [81.5, 50749.0], [81.6, 50749.0], [81.7, 50749.0], [81.8, 50749.0], [81.9, 50749.0], [82.0, 50876.0], [82.1, 50876.0], [82.2, 50876.0], [82.3, 50876.0], [82.4, 50876.0], [82.5, 50878.0], [82.6, 50878.0], [82.7, 50878.0], [82.8, 50878.0], [82.9, 50878.0], [83.0, 50921.0], [83.1, 50921.0], [83.2, 50921.0], [83.3, 50921.0], [83.4, 50921.0], [83.5, 50939.0], [83.6, 50939.0], [83.7, 50939.0], [83.8, 50939.0], [83.9, 50939.0], [84.0, 51019.0], [84.1, 51019.0], [84.2, 51019.0], [84.3, 51019.0], [84.4, 51019.0], [84.5, 51050.0], [84.6, 51050.0], [84.7, 51050.0], [84.8, 51050.0], [84.9, 51050.0], [85.0, 51091.0], [85.1, 51091.0], [85.2, 51091.0], [85.3, 51091.0], [85.4, 51091.0], [85.5, 51094.0], [85.6, 51094.0], [85.7, 51094.0], [85.8, 51094.0], [85.9, 51094.0], [86.0, 51106.0], [86.1, 51106.0], [86.2, 51106.0], [86.3, 51106.0], [86.4, 51106.0], [86.5, 51146.0], [86.6, 51146.0], [86.7, 51146.0], [86.8, 51146.0], [86.9, 51146.0], [87.0, 51203.0], [87.1, 51203.0], [87.2, 51203.0], [87.3, 51203.0], [87.4, 51203.0], [87.5, 51226.0], [87.6, 51226.0], [87.7, 51226.0], [87.8, 51226.0], [87.9, 51226.0], [88.0, 51417.0], [88.1, 51417.0], [88.2, 51417.0], [88.3, 51417.0], [88.4, 51417.0], [88.5, 51427.0], [88.6, 51427.0], [88.7, 51427.0], [88.8, 51427.0], [88.9, 51427.0], [89.0, 51429.0], [89.1, 51429.0], [89.2, 51429.0], [89.3, 51429.0], [89.4, 51429.0], [89.5, 51475.0], [89.6, 51475.0], [89.7, 51475.0], [89.8, 51475.0], [89.9, 51475.0], [90.0, 51496.0], [90.1, 51496.0], [90.2, 51496.0], [90.3, 51496.0], [90.4, 51496.0], [90.5, 51565.0], [90.6, 51565.0], [90.7, 51565.0], [90.8, 51565.0], [90.9, 51565.0], [91.0, 51613.0], [91.1, 51613.0], [91.2, 51613.0], [91.3, 51613.0], [91.4, 51613.0], [91.5, 51625.0], [91.6, 51625.0], [91.7, 51625.0], [91.8, 51625.0], [91.9, 51625.0], [92.0, 51655.0], [92.1, 51655.0], [92.2, 51655.0], [92.3, 51655.0], [92.4, 51655.0], [92.5, 51667.0], [92.6, 51667.0], [92.7, 51667.0], [92.8, 51667.0], [92.9, 51667.0], [93.0, 51708.0], [93.1, 51708.0], [93.2, 51708.0], [93.3, 51708.0], [93.4, 51708.0], [93.5, 51728.0], [93.6, 51728.0], [93.7, 51728.0], [93.8, 51728.0], [93.9, 51728.0], [94.0, 51740.0], [94.1, 51740.0], [94.2, 51740.0], [94.3, 51740.0], [94.4, 51740.0], [94.5, 51747.0], [94.6, 51747.0], [94.7, 51747.0], [94.8, 51747.0], [94.9, 51747.0], [95.0, 51836.0], [95.1, 51836.0], [95.2, 51836.0], [95.3, 51836.0], [95.4, 51836.0], [95.5, 51842.0], [95.6, 51842.0], [95.7, 51842.0], [95.8, 51842.0], [95.9, 51842.0], [96.0, 51875.0], [96.1, 51875.0], [96.2, 51875.0], [96.3, 51875.0], [96.4, 51875.0], [96.5, 51949.0], [96.6, 51949.0], [96.7, 51949.0], [96.8, 51949.0], [96.9, 51949.0], [97.0, 51969.0], [97.1, 51969.0], [97.2, 51969.0], [97.3, 51969.0], [97.4, 51969.0], [97.5, 52017.0], [97.6, 52017.0], [97.7, 52017.0], [97.8, 52017.0], [97.9, 52017.0], [98.0, 52040.0], [98.1, 52040.0], [98.2, 52040.0], [98.3, 52040.0], [98.4, 52040.0], [98.5, 52225.0], [98.6, 52225.0], [98.7, 52225.0], [98.8, 52225.0], [98.9, 52225.0], [99.0, 52508.0], [99.1, 52508.0], [99.2, 52508.0], [99.3, 52508.0], [99.4, 52508.0], [99.5, 52662.0], [99.6, 52662.0], [99.7, 52662.0], [99.8, 52662.0], [99.9, 52662.0]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[0.0, 594.0], [0.1, 594.0], [0.2, 594.0], [0.3, 594.0], [0.4, 594.0], [0.5, 617.0], [0.6, 617.0], [0.7, 617.0], [0.8, 617.0], [0.9, 617.0], [1.0, 617.0], [1.1, 617.0], [1.2, 617.0], [1.3, 617.0], [1.4, 617.0], [1.5, 625.0], [1.6, 625.0], [1.7, 625.0], [1.8, 625.0], [1.9, 625.0], [2.0, 628.0], [2.1, 628.0], [2.2, 628.0], [2.3, 628.0], [2.4, 628.0], [2.5, 629.0], [2.6, 629.0], [2.7, 629.0], [2.8, 629.0], [2.9, 629.0], [3.0, 630.0], [3.1, 630.0], [3.2, 630.0], [3.3, 630.0], [3.4, 630.0], [3.5, 653.0], [3.6, 653.0], [3.7, 653.0], [3.8, 653.0], [3.9, 653.0], [4.0, 670.0], [4.1, 670.0], [4.2, 670.0], [4.3, 670.0], [4.4, 670.0], [4.5, 678.0], [4.6, 678.0], [4.7, 678.0], [4.8, 678.0], [4.9, 678.0], [5.0, 690.0], [5.1, 690.0], [5.2, 690.0], [5.3, 690.0], [5.4, 690.0], [5.5, 693.0], [5.6, 693.0], [5.7, 693.0], [5.8, 693.0], [5.9, 693.0], [6.0, 707.0], [6.1, 707.0], [6.2, 707.0], [6.3, 707.0], [6.4, 707.0], [6.5, 855.0], [6.6, 855.0], [6.7, 855.0], [6.8, 855.0], [6.9, 855.0], [7.0, 867.0], [7.1, 867.0], [7.2, 867.0], [7.3, 867.0], [7.4, 867.0], [7.5, 877.0], [7.6, 877.0], [7.7, 877.0], [7.8, 877.0], [7.9, 877.0], [8.0, 879.0], [8.1, 879.0], [8.2, 879.0], [8.3, 879.0], [8.4, 879.0], [8.5, 914.0], [8.6, 914.0], [8.7, 914.0], [8.8, 914.0], [8.9, 914.0], [9.0, 932.0], [9.1, 932.0], [9.2, 932.0], [9.3, 932.0], [9.4, 932.0], [9.5, 990.0], [9.6, 990.0], [9.7, 990.0], [9.8, 990.0], [9.9, 990.0], [10.0, 1057.0], [10.1, 1057.0], [10.2, 1057.0], [10.3, 1057.0], [10.4, 1057.0], [10.5, 1093.0], [10.6, 1093.0], [10.7, 1093.0], [10.8, 1093.0], [10.9, 1093.0], [11.0, 1099.0], [11.1, 1099.0], [11.2, 1099.0], [11.3, 1099.0], [11.4, 1099.0], [11.5, 1117.0], [11.6, 1117.0], [11.7, 1117.0], [11.8, 1117.0], [11.9, 1117.0], [12.0, 1129.0], [12.1, 1129.0], [12.2, 1129.0], [12.3, 1129.0], [12.4, 1129.0], [12.5, 1218.0], [12.6, 1218.0], [12.7, 1218.0], [12.8, 1218.0], [12.9, 1218.0], [13.0, 1257.0], [13.1, 1257.0], [13.2, 1257.0], [13.3, 1257.0], [13.4, 1257.0], [13.5, 1270.0], [13.6, 1270.0], [13.7, 1270.0], [13.8, 1270.0], [13.9, 1270.0], [14.0, 1356.0], [14.1, 1356.0], [14.2, 1356.0], [14.3, 1356.0], [14.4, 1356.0], [14.5, 1605.0], [14.6, 1605.0], [14.7, 1605.0], [14.8, 1605.0], [14.9, 1605.0], [15.0, 1639.0], [15.1, 1639.0], [15.2, 1639.0], [15.3, 1639.0], [15.4, 1639.0], [15.5, 1806.0], [15.6, 1806.0], [15.7, 1806.0], [15.8, 1806.0], [15.9, 1806.0], [16.0, 1912.0], [16.1, 1912.0], [16.2, 1912.0], [16.3, 1912.0], [16.4, 1912.0], [16.5, 2804.0], [16.6, 2804.0], [16.7, 2804.0], [16.8, 2804.0], [16.9, 2804.0], [17.0, 2839.0], [17.1, 2839.0], [17.2, 2839.0], [17.3, 2839.0], [17.4, 2839.0], [17.5, 5254.0], [17.6, 5254.0], [17.7, 5254.0], [17.8, 5254.0], [17.9, 5254.0], [18.0, 6151.0], [18.1, 6151.0], [18.2, 6151.0], [18.3, 6151.0], [18.4, 6151.0], [18.5, 6726.0], [18.6, 6726.0], [18.7, 6726.0], [18.8, 6726.0], [18.9, 6726.0], [19.0, 7980.0], [19.1, 7980.0], [19.2, 7980.0], [19.3, 7980.0], [19.4, 7980.0], [19.5, 7990.0], [19.6, 7990.0], [19.7, 7990.0], [19.8, 7990.0], [19.9, 7990.0], [20.0, 8374.0], [20.1, 8374.0], [20.2, 8374.0], [20.3, 8374.0], [20.4, 8374.0], [20.5, 8676.0], [20.6, 8676.0], [20.7, 8676.0], [20.8, 8676.0], [20.9, 8676.0], [21.0, 8880.0], [21.1, 8880.0], [21.2, 8880.0], [21.3, 8880.0], [21.4, 8880.0], [21.5, 9231.0], [21.6, 9231.0], [21.7, 9231.0], [21.8, 9231.0], [21.9, 9231.0], [22.0, 9620.0], [22.1, 9620.0], [22.2, 9620.0], [22.3, 9620.0], [22.4, 9620.0], [22.5, 10056.0], [22.6, 10056.0], [22.7, 10056.0], [22.8, 10056.0], [22.9, 10056.0], [23.0, 10188.0], [23.1, 10188.0], [23.2, 10188.0], [23.3, 10188.0], [23.4, 10188.0], [23.5, 10212.0], [23.6, 10212.0], [23.7, 10212.0], [23.8, 10212.0], [23.9, 10212.0], [24.0, 10216.0], [24.1, 10216.0], [24.2, 10216.0], [24.3, 10216.0], [24.4, 10216.0], [24.5, 10218.0], [24.6, 10218.0], [24.7, 10218.0], [24.8, 10218.0], [24.9, 10218.0], [25.0, 10234.0], [25.1, 10234.0], [25.2, 10234.0], [25.3, 10234.0], [25.4, 10234.0], [25.5, 10246.0], [25.6, 10246.0], [25.7, 10246.0], [25.8, 10246.0], [25.9, 10246.0], [26.0, 10250.0], [26.1, 10250.0], [26.2, 10250.0], [26.3, 10250.0], [26.4, 10250.0], [26.5, 10258.0], [26.6, 10258.0], [26.7, 10258.0], [26.8, 10258.0], [26.9, 10258.0], [27.0, 10287.0], [27.1, 10287.0], [27.2, 10287.0], [27.3, 10287.0], [27.4, 10287.0], [27.5, 10293.0], [27.6, 10293.0], [27.7, 10293.0], [27.8, 10293.0], [27.9, 10293.0], [28.0, 10303.0], [28.1, 10303.0], [28.2, 10303.0], [28.3, 10303.0], [28.4, 10303.0], [28.5, 10358.0], [28.6, 10358.0], [28.7, 10358.0], [28.8, 10358.0], [28.9, 10358.0], [29.0, 10377.0], [29.1, 10377.0], [29.2, 10377.0], [29.3, 10377.0], [29.4, 10377.0], [29.5, 10393.0], [29.6, 10393.0], [29.7, 10393.0], [29.8, 10393.0], [29.9, 10393.0], [30.0, 10400.0], [30.1, 10400.0], [30.2, 10400.0], [30.3, 10400.0], [30.4, 10400.0], [30.5, 10413.0], [30.6, 10413.0], [30.7, 10413.0], [30.8, 10413.0], [30.9, 10413.0], [31.0, 10428.0], [31.1, 10428.0], [31.2, 10428.0], [31.3, 10428.0], [31.4, 10428.0], [31.5, 10435.0], [31.6, 10435.0], [31.7, 10435.0], [31.8, 10435.0], [31.9, 10435.0], [32.0, 10451.0], [32.1, 10451.0], [32.2, 10451.0], [32.3, 10451.0], [32.4, 10451.0], [32.5, 10462.0], [32.6, 10462.0], [32.7, 10462.0], [32.8, 10462.0], [32.9, 10462.0], [33.0, 10472.0], [33.1, 10472.0], [33.2, 10472.0], [33.3, 10472.0], [33.4, 10472.0], [33.5, 10483.0], [33.6, 10483.0], [33.7, 10483.0], [33.8, 10483.0], [33.9, 10483.0], [34.0, 10506.0], [34.1, 10506.0], [34.2, 10506.0], [34.3, 10506.0], [34.4, 10506.0], [34.5, 10524.0], [34.6, 10524.0], [34.7, 10524.0], [34.8, 10524.0], [34.9, 10524.0], [35.0, 10551.0], [35.1, 10551.0], [35.2, 10551.0], [35.3, 10551.0], [35.4, 10551.0], [35.5, 10585.0], [35.6, 10585.0], [35.7, 10585.0], [35.8, 10585.0], [35.9, 10585.0], [36.0, 10597.0], [36.1, 10597.0], [36.2, 10597.0], [36.3, 10597.0], [36.4, 10597.0], [36.5, 10620.0], [36.6, 10620.0], [36.7, 10620.0], [36.8, 10620.0], [36.9, 10620.0], [37.0, 10650.0], [37.1, 10650.0], [37.2, 10650.0], [37.3, 10650.0], [37.4, 10650.0], [37.5, 10713.0], [37.6, 10713.0], [37.7, 10713.0], [37.8, 10713.0], [37.9, 10713.0], [38.0, 10727.0], [38.1, 10727.0], [38.2, 10727.0], [38.3, 10727.0], [38.4, 10727.0], [38.5, 10783.0], [38.6, 10783.0], [38.7, 10783.0], [38.8, 10783.0], [38.9, 10783.0], [39.0, 10784.0], [39.1, 10784.0], [39.2, 10784.0], [39.3, 10784.0], [39.4, 10784.0], [39.5, 14624.0], [39.6, 14624.0], [39.7, 14624.0], [39.8, 14624.0], [39.9, 14624.0], [40.0, 15781.0], [40.1, 15781.0], [40.2, 15781.0], [40.3, 15781.0], [40.4, 15781.0], [40.5, 16912.0], [40.6, 16912.0], [40.7, 16912.0], [40.8, 16912.0], [40.9, 16912.0], [41.0, 17640.0], [41.1, 17640.0], [41.2, 17640.0], [41.3, 17640.0], [41.4, 17640.0], [41.5, 17840.0], [41.6, 17840.0], [41.7, 17840.0], [41.8, 17840.0], [41.9, 17840.0], [42.0, 18452.0], [42.1, 18452.0], [42.2, 18452.0], [42.3, 18452.0], [42.4, 18452.0], [42.5, 18583.0], [42.6, 18583.0], [42.7, 18583.0], [42.8, 18583.0], [42.9, 18583.0], [43.0, 19390.0], [43.1, 19390.0], [43.2, 19390.0], [43.3, 19390.0], [43.4, 19390.0], [43.5, 20922.0], [43.6, 20922.0], [43.7, 20922.0], [43.8, 20922.0], [43.9, 20922.0], [44.0, 21264.0], [44.1, 21264.0], [44.2, 21264.0], [44.3, 21264.0], [44.4, 21264.0], [44.5, 21283.0], [44.6, 21283.0], [44.7, 21283.0], [44.8, 21283.0], [44.9, 21283.0], [45.0, 21824.0], [45.1, 21824.0], [45.2, 21824.0], [45.3, 21824.0], [45.4, 21824.0], [45.5, 23492.0], [45.6, 23492.0], [45.7, 23492.0], [45.8, 23492.0], [45.9, 23492.0], [46.0, 24711.0], [46.1, 24711.0], [46.2, 24711.0], [46.3, 24711.0], [46.4, 24711.0], [46.5, 25036.0], [46.6, 25036.0], [46.7, 25036.0], [46.8, 25036.0], [46.9, 25036.0], [47.0, 26354.0], [47.1, 26354.0], [47.2, 26354.0], [47.3, 26354.0], [47.4, 26354.0], [47.5, 28334.0], [47.6, 28334.0], [47.7, 28334.0], [47.8, 28334.0], [47.9, 28334.0], [48.0, 30148.0], [48.1, 30148.0], [48.2, 30148.0], [48.3, 30148.0], [48.4, 30148.0], [48.5, 30746.0], [48.6, 30746.0], [48.7, 30746.0], [48.8, 30746.0], [48.9, 30746.0], [49.0, 32286.0], [49.1, 32286.0], [49.2, 32286.0], [49.3, 32286.0], [49.4, 32286.0], [49.5, 32337.0], [49.6, 32337.0], [49.7, 32337.0], [49.8, 32337.0], [49.9, 32337.0], [50.0, 32920.0], [50.1, 32920.0], [50.2, 32920.0], [50.3, 32920.0], [50.4, 32920.0], [50.5, 33010.0], [50.6, 33010.0], [50.7, 33010.0], [50.8, 33010.0], [50.9, 33010.0], [51.0, 34156.0], [51.1, 34156.0], [51.2, 34156.0], [51.3, 34156.0], [51.4, 34156.0], [51.5, 35055.0], [51.6, 35055.0], [51.7, 35055.0], [51.8, 35055.0], [51.9, 35055.0], [52.0, 37080.0], [52.1, 37080.0], [52.2, 37080.0], [52.3, 37080.0], [52.4, 37080.0], [52.5, 38437.0], [52.6, 38437.0], [52.7, 38437.0], [52.8, 38437.0], [52.9, 38437.0], [53.0, 39051.0], [53.1, 39051.0], [53.2, 39051.0], [53.3, 39051.0], [53.4, 39051.0], [53.5, 39384.0], [53.6, 39384.0], [53.7, 39384.0], [53.8, 39384.0], [53.9, 39384.0], [54.0, 40140.0], [54.1, 40140.0], [54.2, 40140.0], [54.3, 40140.0], [54.4, 40140.0], [54.5, 40837.0], [54.6, 40837.0], [54.7, 40837.0], [54.8, 40837.0], [54.9, 40837.0], [55.0, 41050.0], [55.1, 41050.0], [55.2, 41050.0], [55.3, 41050.0], [55.4, 41050.0], [55.5, 42184.0], [55.6, 42184.0], [55.7, 42184.0], [55.8, 42184.0], [55.9, 42184.0], [56.0, 42202.0], [56.1, 42202.0], [56.2, 42202.0], [56.3, 42202.0], [56.4, 42202.0], [56.5, 42281.0], [56.6, 42281.0], [56.7, 42281.0], [56.8, 42281.0], [56.9, 42281.0], [57.0, 42506.0], [57.1, 42506.0], [57.2, 42506.0], [57.3, 42506.0], [57.4, 42506.0], [57.5, 42658.0], [57.6, 42658.0], [57.7, 42658.0], [57.8, 42658.0], [57.9, 42658.0], [58.0, 42820.0], [58.1, 42820.0], [58.2, 42820.0], [58.3, 42820.0], [58.4, 42820.0], [58.5, 43172.0], [58.6, 43172.0], [58.7, 43172.0], [58.8, 43172.0], [58.9, 43172.0], [59.0, 43186.0], [59.1, 43186.0], [59.2, 43186.0], [59.3, 43186.0], [59.4, 43186.0], [59.5, 43495.0], [59.6, 43495.0], [59.7, 43495.0], [59.8, 43495.0], [59.9, 43495.0], [60.0, 43758.0], [60.1, 43758.0], [60.2, 43758.0], [60.3, 43758.0], [60.4, 43758.0], [60.5, 44150.0], [60.6, 44150.0], [60.7, 44150.0], [60.8, 44150.0], [60.9, 44150.0], [61.0, 44346.0], [61.1, 44346.0], [61.2, 44346.0], [61.3, 44346.0], [61.4, 44346.0], [61.5, 44483.0], [61.6, 44483.0], [61.7, 44483.0], [61.8, 44483.0], [61.9, 44483.0], [62.0, 44539.0], [62.1, 44539.0], [62.2, 44539.0], [62.3, 44539.0], [62.4, 44539.0], [62.5, 44655.0], [62.6, 44655.0], [62.7, 44655.0], [62.8, 44655.0], [62.9, 44655.0], [63.0, 44671.0], [63.1, 44671.0], [63.2, 44671.0], [63.3, 44671.0], [63.4, 44671.0], [63.5, 44782.0], [63.6, 44782.0], [63.7, 44782.0], [63.8, 44782.0], [63.9, 44782.0], [64.0, 44902.0], [64.1, 44902.0], [64.2, 44902.0], [64.3, 44902.0], [64.4, 44902.0], [64.5, 45193.0], [64.6, 45193.0], [64.7, 45193.0], [64.8, 45193.0], [64.9, 45193.0], [65.0, 45278.0], [65.1, 45278.0], [65.2, 45278.0], [65.3, 45278.0], [65.4, 45278.0], [65.5, 45416.0], [65.6, 45416.0], [65.7, 45416.0], [65.8, 45416.0], [65.9, 45416.0], [66.0, 45436.0], [66.1, 45436.0], [66.2, 45436.0], [66.3, 45436.0], [66.4, 45436.0], [66.5, 45715.0], [66.6, 45715.0], [66.7, 45715.0], [66.8, 45715.0], [66.9, 45715.0], [67.0, 45860.0], [67.1, 45860.0], [67.2, 45860.0], [67.3, 45860.0], [67.4, 45860.0], [67.5, 45866.0], [67.6, 45866.0], [67.7, 45866.0], [67.8, 45866.0], [67.9, 45866.0], [68.0, 45898.0], [68.1, 45898.0], [68.2, 45898.0], [68.3, 45898.0], [68.4, 45898.0], [68.5, 46034.0], [68.6, 46034.0], [68.7, 46034.0], [68.8, 46034.0], [68.9, 46034.0], [69.0, 46059.0], [69.1, 46059.0], [69.2, 46059.0], [69.3, 46059.0], [69.4, 46059.0], [69.5, 46153.0], [69.6, 46153.0], [69.7, 46153.0], [69.8, 46153.0], [69.9, 46153.0], [70.0, 46158.0], [70.1, 46158.0], [70.2, 46158.0], [70.3, 46158.0], [70.4, 46158.0], [70.5, 46203.0], [70.6, 46203.0], [70.7, 46203.0], [70.8, 46203.0], [70.9, 46203.0], [71.0, 46726.0], [71.1, 46726.0], [71.2, 46726.0], [71.3, 46726.0], [71.4, 46726.0], [71.5, 46887.0], [71.6, 46887.0], [71.7, 46887.0], [71.8, 46887.0], [71.9, 46887.0], [72.0, 46988.0], [72.1, 46988.0], [72.2, 46988.0], [72.3, 46988.0], [72.4, 46988.0], [72.5, 47156.0], [72.6, 47156.0], [72.7, 47156.0], [72.8, 47156.0], [72.9, 47156.0], [73.0, 47202.0], [73.1, 47202.0], [73.2, 47202.0], [73.3, 47202.0], [73.4, 47202.0], [73.5, 47227.0], [73.6, 47227.0], [73.7, 47227.0], [73.8, 47227.0], [73.9, 47227.0], [74.0, 47767.0], [74.1, 47767.0], [74.2, 47767.0], [74.3, 47767.0], [74.4, 47767.0], [74.5, 48319.0], [74.6, 48319.0], [74.7, 48319.0], [74.8, 48319.0], [74.9, 48319.0], [75.0, 48457.0], [75.1, 48457.0], [75.2, 48457.0], [75.3, 48457.0], [75.4, 48457.0], [75.5, 48559.0], [75.6, 48559.0], [75.7, 48559.0], [75.8, 48559.0], [75.9, 48559.0], [76.0, 48607.0], [76.1, 48607.0], [76.2, 48607.0], [76.3, 48607.0], [76.4, 48607.0], [76.5, 48625.0], [76.6, 48625.0], [76.7, 48625.0], [76.8, 48625.0], [76.9, 48625.0], [77.0, 48776.0], [77.1, 48776.0], [77.2, 48776.0], [77.3, 48776.0], [77.4, 48776.0], [77.5, 48790.0], [77.6, 48790.0], [77.7, 48790.0], [77.8, 48790.0], [77.9, 48790.0], [78.0, 48828.0], [78.1, 48828.0], [78.2, 48828.0], [78.3, 48828.0], [78.4, 48828.0], [78.5, 48908.0], [78.6, 48908.0], [78.7, 48908.0], [78.8, 48908.0], [78.9, 48908.0], [79.0, 49007.0], [79.1, 49007.0], [79.2, 49007.0], [79.3, 49007.0], [79.4, 49007.0], [79.5, 49103.0], [79.6, 49103.0], [79.7, 49103.0], [79.8, 49103.0], [79.9, 49103.0], [80.0, 49125.0], [80.1, 49125.0], [80.2, 49125.0], [80.3, 49125.0], [80.4, 49125.0], [80.5, 49138.0], [80.6, 49138.0], [80.7, 49138.0], [80.8, 49138.0], [80.9, 49138.0], [81.0, 49367.0], [81.1, 49367.0], [81.2, 49367.0], [81.3, 49367.0], [81.4, 49367.0], [81.5, 49402.0], [81.6, 49402.0], [81.7, 49402.0], [81.8, 49402.0], [81.9, 49402.0], [82.0, 49416.0], [82.1, 49416.0], [82.2, 49416.0], [82.3, 49416.0], [82.4, 49416.0], [82.5, 49488.0], [82.6, 49488.0], [82.7, 49488.0], [82.8, 49488.0], [82.9, 49488.0], [83.0, 49509.0], [83.1, 49509.0], [83.2, 49509.0], [83.3, 49509.0], [83.4, 49509.0], [83.5, 49530.0], [83.6, 49530.0], [83.7, 49530.0], [83.8, 49530.0], [83.9, 49530.0], [84.0, 49534.0], [84.1, 49534.0], [84.2, 49534.0], [84.3, 49534.0], [84.4, 49534.0], [84.5, 49630.0], [84.6, 49630.0], [84.7, 49630.0], [84.8, 49630.0], [84.9, 49630.0], [85.0, 49631.0], [85.1, 49631.0], [85.2, 49631.0], [85.3, 49631.0], [85.4, 49631.0], [85.5, 49730.0], [85.6, 49730.0], [85.7, 49730.0], [85.8, 49730.0], [85.9, 49730.0], [86.0, 49753.0], [86.1, 49753.0], [86.2, 49753.0], [86.3, 49753.0], [86.4, 49753.0], [86.5, 49756.0], [86.6, 49756.0], [86.7, 49756.0], [86.8, 49756.0], [86.9, 49756.0], [87.0, 49798.0], [87.1, 49798.0], [87.2, 49798.0], [87.3, 49798.0], [87.4, 49798.0], [87.5, 49804.0], [87.6, 49804.0], [87.7, 49804.0], [87.8, 49804.0], [87.9, 49804.0], [88.0, 49841.0], [88.1, 49841.0], [88.2, 49841.0], [88.3, 49841.0], [88.4, 49841.0], [88.5, 49930.0], [88.6, 49930.0], [88.7, 49930.0], [88.8, 49930.0], [88.9, 49930.0], [89.0, 49945.0], [89.1, 49945.0], [89.2, 49945.0], [89.3, 49945.0], [89.4, 49945.0], [89.5, 49975.0], [89.6, 49975.0], [89.7, 49975.0], [89.8, 49975.0], [89.9, 49975.0], [90.0, 49978.0], [90.1, 49978.0], [90.2, 49978.0], [90.3, 49978.0], [90.4, 49978.0], [90.5, 49989.0], [90.6, 49989.0], [90.7, 49989.0], [90.8, 49989.0], [90.9, 49989.0], [91.0, 50009.0], [91.1, 50009.0], [91.2, 50009.0], [91.3, 50009.0], [91.4, 50009.0], [91.5, 50018.0], [91.6, 50018.0], [91.7, 50018.0], [91.8, 50018.0], [91.9, 50018.0], [92.0, 50106.0], [92.1, 50106.0], [92.2, 50106.0], [92.3, 50106.0], [92.4, 50106.0], [92.5, 50229.0], [92.6, 50229.0], [92.7, 50229.0], [92.8, 50229.0], [92.9, 50229.0], [93.0, 50321.0], [93.1, 50321.0], [93.2, 50321.0], [93.3, 50321.0], [93.4, 50321.0], [93.5, 50370.0], [93.6, 50370.0], [93.7, 50370.0], [93.8, 50370.0], [93.9, 50370.0], [94.0, 50452.0], [94.1, 50452.0], [94.2, 50452.0], [94.3, 50452.0], [94.4, 50452.0], [94.5, 50477.0], [94.6, 50477.0], [94.7, 50477.0], [94.8, 50477.0], [94.9, 50477.0], [95.0, 50576.0], [95.1, 50576.0], [95.2, 50576.0], [95.3, 50576.0], [95.4, 50576.0], [95.5, 50592.0], [95.6, 50592.0], [95.7, 50592.0], [95.8, 50592.0], [95.9, 50592.0], [96.0, 50605.0], [96.1, 50605.0], [96.2, 50605.0], [96.3, 50605.0], [96.4, 50605.0], [96.5, 50680.0], [96.6, 50680.0], [96.7, 50680.0], [96.8, 50680.0], [96.9, 50680.0], [97.0, 50802.0], [97.1, 50802.0], [97.2, 50802.0], [97.3, 50802.0], [97.4, 50802.0], [97.5, 50894.0], [97.6, 50894.0], [97.7, 50894.0], [97.8, 50894.0], [97.9, 50894.0], [98.0, 51039.0], [98.1, 51039.0], [98.2, 51039.0], [98.3, 51039.0], [98.4, 51039.0], [98.5, 51171.0], [98.6, 51171.0], [98.7, 51171.0], [98.8, 51171.0], [98.9, 51171.0], [99.0, 51198.0], [99.1, 51198.0], [99.2, 51198.0], [99.3, 51198.0], [99.4, 51198.0], [99.5, 51403.0], [99.6, 51403.0], [99.7, 51403.0], [99.8, 51403.0], [99.9, 51403.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 11.0, "series": [{"data": [[48700.0, 1.0], [50500.0, 3.0], [49500.0, 1.0], [50900.0, 1.0], [51300.0, 1.0], [51700.0, 1.0], [52100.0, 2.0], [51900.0, 2.0], [52300.0, 1.0], [52900.0, 1.0], [53100.0, 4.0], [52500.0, 2.0], [53300.0, 1.0], [53700.0, 2.0], [54100.0, 2.0], [53900.0, 1.0], [54300.0, 3.0], [55100.0, 3.0], [54500.0, 3.0], [54700.0, 4.0], [55300.0, 5.0], [55500.0, 5.0], [56100.0, 1.0], [500.0, 4.0], [600.0, 5.0], [700.0, 1.0], [800.0, 6.0], [900.0, 3.0], [1000.0, 4.0], [1100.0, 1.0], [1200.0, 1.0], [1400.0, 1.0], [1600.0, 1.0], [2000.0, 2.0], [2300.0, 3.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 2.0], [3900.0, 1.0], [5500.0, 1.0], [6800.0, 1.0], [7600.0, 1.0], [8000.0, 1.0], [10200.0, 1.0], [11100.0, 1.0], [16800.0, 1.0], [20800.0, 1.0], [22000.0, 1.0], [22400.0, 1.0], [23100.0, 1.0], [24300.0, 1.0], [24100.0, 1.0], [26200.0, 1.0], [27100.0, 1.0], [27400.0, 1.0], [27500.0, 1.0], [26900.0, 1.0], [27300.0, 2.0], [27600.0, 1.0], [28400.0, 4.0], [27900.0, 3.0], [28100.0, 3.0], [28300.0, 1.0], [28200.0, 2.0], [28600.0, 2.0], [28500.0, 3.0], [28000.0, 1.0], [28900.0, 3.0], [28700.0, 7.0], [28800.0, 5.0], [29300.0, 3.0], [29100.0, 2.0], [46800.0, 1.0], [48000.0, 1.0], [50000.0, 2.0], [50400.0, 2.0], [50600.0, 1.0], [50800.0, 1.0], [51000.0, 1.0], [51600.0, 1.0], [51800.0, 2.0], [53200.0, 2.0], [53000.0, 2.0], [52200.0, 1.0], [52400.0, 1.0], [54800.0, 3.0], [53400.0, 1.0], [53600.0, 4.0], [53800.0, 2.0], [54200.0, 3.0], [55200.0, 11.0], [55000.0, 4.0], [54600.0, 1.0], [54400.0, 2.0], [55400.0, 1.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[35700.0, 1.0], [35100.0, 1.0], [38700.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [42100.0, 1.0], [42300.0, 1.0], [43500.0, 1.0], [46100.0, 1.0], [48700.0, 1.0], [48900.0, 1.0], [47900.0, 1.0], [49300.0, 1.0], [49700.0, 1.0], [50700.0, 2.0], [50900.0, 2.0], [51100.0, 2.0], [50100.0, 4.0], [49900.0, 1.0], [50500.0, 6.0], [50300.0, 2.0], [51700.0, 4.0], [52500.0, 1.0], [51500.0, 1.0], [51900.0, 2.0], [500.0, 3.0], [600.0, 6.0], [800.0, 4.0], [900.0, 4.0], [1000.0, 2.0], [1100.0, 1.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 2.0], [1700.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2800.0, 2.0], [2900.0, 1.0], [3400.0, 1.0], [3800.0, 1.0], [6700.0, 1.0], [7800.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [9200.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [12600.0, 2.0], [13100.0, 1.0], [13600.0, 1.0], [15200.0, 5.0], [15000.0, 2.0], [14900.0, 1.0], [15100.0, 2.0], [15300.0, 4.0], [15500.0, 4.0], [15700.0, 3.0], [15400.0, 6.0], [15600.0, 3.0], [15800.0, 1.0], [16100.0, 2.0], [15900.0, 1.0], [16200.0, 2.0], [16000.0, 2.0], [17200.0, 1.0], [16400.0, 1.0], [19400.0, 1.0], [19500.0, 1.0], [20400.0, 1.0], [25500.0, 1.0], [26000.0, 1.0], [26400.0, 1.0], [27100.0, 1.0], [27800.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [29100.0, 1.0], [30600.0, 1.0], [30900.0, 1.0], [31000.0, 1.0], [31200.0, 1.0], [32700.0, 2.0], [33400.0, 2.0], [35400.0, 1.0], [36400.0, 1.0], [36800.0, 2.0], [35200.0, 1.0], [38200.0, 1.0], [39400.0, 1.0], [39000.0, 1.0], [41800.0, 1.0], [42600.0, 1.0], [44000.0, 1.0], [48200.0, 1.0], [48800.0, 1.0], [47600.0, 1.0], [49000.0, 1.0], [50800.0, 2.0], [50000.0, 6.0], [49800.0, 1.0], [49600.0, 2.0], [51000.0, 4.0], [50200.0, 1.0], [50400.0, 1.0], [50600.0, 4.0], [49200.0, 1.0], [51400.0, 5.0], [51200.0, 2.0], [51600.0, 4.0], [52200.0, 1.0], [51800.0, 3.0], [52600.0, 1.0], [52000.0, 2.0]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[32900.0, 1.0], [34100.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [42100.0, 1.0], [42500.0, 1.0], [43100.0, 2.0], [43700.0, 1.0], [44500.0, 1.0], [44700.0, 1.0], [44300.0, 1.0], [44100.0, 1.0], [44900.0, 1.0], [45700.0, 1.0], [46900.0, 1.0], [47100.0, 1.0], [46100.0, 2.0], [46700.0, 1.0], [45100.0, 1.0], [47700.0, 1.0], [48500.0, 1.0], [48700.0, 2.0], [49100.0, 3.0], [48300.0, 1.0], [48900.0, 1.0], [49300.0, 1.0], [49500.0, 3.0], [50100.0, 1.0], [49900.0, 5.0], [49700.0, 4.0], [51100.0, 2.0], [50300.0, 2.0], [50500.0, 2.0], [500.0, 1.0], [600.0, 11.0], [700.0, 1.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 2.0], [1200.0, 3.0], [1300.0, 1.0], [1600.0, 2.0], [1800.0, 1.0], [1900.0, 1.0], [2800.0, 2.0], [5200.0, 1.0], [6100.0, 1.0], [6700.0, 1.0], [7900.0, 2.0], [8300.0, 1.0], [8600.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [10000.0, 1.0], [10200.0, 9.0], [10100.0, 1.0], [10700.0, 4.0], [10400.0, 8.0], [10500.0, 5.0], [10600.0, 2.0], [10300.0, 4.0], [14600.0, 1.0], [15700.0, 1.0], [16900.0, 1.0], [17600.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [19300.0, 1.0], [18500.0, 1.0], [20900.0, 1.0], [21200.0, 2.0], [21800.0, 1.0], [23400.0, 1.0], [24700.0, 1.0], [25000.0, 1.0], [26300.0, 1.0], [28300.0, 1.0], [30700.0, 1.0], [30100.0, 1.0], [32300.0, 1.0], [32200.0, 1.0], [33000.0, 1.0], [35000.0, 1.0], [37000.0, 1.0], [38400.0, 1.0], [39000.0, 1.0], [40800.0, 1.0], [41000.0, 1.0], [42600.0, 1.0], [42800.0, 1.0], [42200.0, 2.0], [44600.0, 2.0], [43400.0, 1.0], [44400.0, 1.0], [45200.0, 1.0], [45400.0, 2.0], [46800.0, 1.0], [46200.0, 1.0], [45800.0, 3.0], [46000.0, 2.0], [48800.0, 1.0], [47200.0, 2.0], [48600.0, 2.0], [48400.0, 1.0], [49000.0, 1.0], [50800.0, 2.0], [49400.0, 3.0], [49600.0, 2.0], [50000.0, 2.0], [50600.0, 2.0], [49800.0, 2.0], [50400.0, 2.0], [50200.0, 1.0], [51000.0, 1.0], [51400.0, 1.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 79.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 308.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 79.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 213.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 308.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 36.11805555555555, "minX": 1.71094536E12, "maxY": 100.0, "series": [{"data": [[1.71094542E12, 100.0], [1.71094536E12, 100.0], [1.71094554E12, 36.11805555555555], [1.71094548E12, 89.3406593406593]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094554E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 594.0, "minX": 1.0, "maxY": 50492.5, "series": [{"data": [[70.0, 16879.0], [45.0, 28563.916666666668], [95.0, 10740.5], [47.0, 26726.0], [46.0, 28328.095238095237], [100.0, 37778.42361111111], [51.0, 23528.25], [53.0, 20865.0], [52.0, 22008.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[85.54500000000002, 34746.575]], "isOverall": false, "label": "HTTP Request - Resize-Aggregated", "isController": false}, {"data": [[37.0, 15666.764705882355], [36.0, 15566.125], [39.0, 13168.0], [38.0, 14855.6], [41.0, 9992.0], [40.0, 12680.0], [42.0, 9220.0], [45.0, 6730.0], [44.0, 8153.5], [47.0, 613.0], [46.0, 3411.0], [49.0, 1401.0], [51.0, 1111.5], [50.0, 1353.0], [53.0, 640.0], [52.0, 649.0], [69.0, 887.0], [88.0, 854.0], [95.0, 918.0], [100.0, 36743.46527777776]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[83.70499999999998, 29808.879999999976]], "isOverall": false, "label": "HTTP Request - Filter-Aggregated", "isController": false}, {"data": [[2.0, 10258.0], [3.0, 10287.0], [4.0, 10435.0], [5.0, 10234.0], [6.0, 10551.0], [7.0, 10250.0], [9.0, 10472.5], [10.0, 10293.0], [11.0, 10218.0], [12.0, 10212.0], [13.0, 10472.0], [14.0, 10451.0], [15.0, 10400.0], [16.0, 10783.0], [17.0, 10524.0], [20.0, 10275.666666666666], [21.0, 10358.0], [22.0, 10216.0], [23.0, 10727.0], [24.0, 10597.0], [25.0, 10620.0], [26.0, 10413.0], [27.0, 10377.0], [28.0, 10585.0], [29.0, 10713.0], [30.0, 10650.0], [31.0, 10506.0], [33.0, 10056.0], [32.0, 10428.0], [35.0, 7990.0], [34.0, 9231.0], [37.0, 2839.0], [36.0, 6726.0], [39.0, 630.0], [38.0, 1639.0], [41.0, 628.0], [40.0, 617.0], [43.0, 879.0], [42.0, 678.0], [45.0, 707.0], [44.0, 914.0], [47.0, 594.0], [46.0, 1099.0], [49.0, 1117.0], [48.0, 867.0], [51.0, 1356.0], [50.0, 1806.0], [53.0, 653.0], [52.0, 670.0], [55.0, 8676.0], [54.0, 2804.0], [57.0, 14624.0], [56.0, 9620.0], [59.0, 17840.0], [58.0, 16912.0], [61.0, 17640.0], [60.0, 18452.0], [63.0, 21824.0], [62.0, 18583.0], [67.0, 23492.0], [66.0, 24711.0], [65.0, 25036.0], [64.0, 21283.0], [71.0, 33010.0], [70.0, 32286.0], [69.0, 30148.0], [68.0, 28334.0], [75.0, 44902.0], [74.0, 46153.0], [73.0, 38437.0], [72.0, 34156.0], [79.0, 42281.0], [78.0, 44150.0], [77.0, 44483.0], [76.0, 43172.0], [82.0, 44782.0], [81.0, 46034.0], [80.0, 44346.0], [87.0, 45193.0], [86.0, 45898.0], [85.0, 42202.0], [84.0, 45429.0], [91.0, 46059.0], [90.0, 44539.0], [89.0, 42820.0], [88.0, 46158.0], [95.0, 45866.0], [94.0, 43758.0], [93.0, 45860.0], [92.0, 43495.0], [99.0, 49805.36363636364], [98.0, 50462.0], [97.0, 50492.5], [96.0, 49064.5], [100.0, 29644.887323943665], [1.0, 10303.0]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}, {"data": [[75.055, 28047.90999999999]], "isOverall": false, "label": "HTTP Request - Composite-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1768.05, "minX": 1.71094536E12, "maxY": 53276.63333333333, "series": [{"data": [[1.71094542E12, 9690.983333333334], [1.71094536E12, 1768.05], [1.71094554E12, 19048.866666666665], [1.71094548E12, 9351.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71094542E12, 17049.05], [1.71094536E12, 6719.266666666666], [1.71094554E12, 24795.05], [1.71094548E12, 53276.63333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094554E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 871.3333333333334, "minX": 1.71094536E12, "maxY": 52173.796116504855, "series": [{"data": [[1.71094542E12, 1258.2608695652175], [1.71094536E12, 52173.796116504855], [1.71094554E12, 28380.340425531915], [1.71094548E12, 7874.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094542E12, 44225.44067796612], [1.71094536E12, 871.3333333333334], [1.71094554E12, 13816.520833333338], [1.71094548E12, 2495.709677419354]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094542E12, 5777.541666666666], [1.71094536E12, 1189.3333333333333], [1.71094554E12, 7772.326530612245], [1.71094548E12, 41020.23387096773]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094554E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 871.3333333333334, "minX": 1.71094536E12, "maxY": 52173.728155339806, "series": [{"data": [[1.71094542E12, 1258.0434782608695], [1.71094536E12, 52173.728155339806], [1.71094554E12, 28378.723404255325], [1.71094548E12, 7873.074074074074]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094542E12, 44225.3898305085], [1.71094536E12, 871.3333333333334], [1.71094554E12, 13816.520833333338], [1.71094548E12, 2495.6774193548385]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094542E12, 5764.124999999999], [1.71094536E12, 1175.3333333333333], [1.71094554E12, 7759.30612244898], [1.71094548E12, 41018.104838709674]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094554E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71094536E12, "maxY": 14.791666666666668, "series": [{"data": [[1.71094542E12, 0.0], [1.71094536E12, 12.291262135922327], [1.71094554E12, 0.0], [1.71094548E12, 0.0]], "isOverall": false, "label": "HTTP Request - Resize", "isController": false}, {"data": [[1.71094542E12, 0.0], [1.71094536E12, 0.0], [1.71094554E12, 14.791666666666668], [1.71094548E12, 2.6774193548387095]], "isOverall": false, "label": "HTTP Request - Filter", "isController": false}, {"data": [[1.71094542E12, 14.041666666666666], [1.71094536E12, 0.0], [1.71094554E12, 0.0], [1.71094548E12, 8.491935483870966]], "isOverall": false, "label": "HTTP Request - Composite", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094554E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 546.0, "minX": 1.71094536E12, "maxY": 29577.0, "series": [{"data": [[1.71094542E12, 29577.0], [1.71094536E12, 8038.0], [1.71094554E12, 29343.0], [1.71094548E12, 28334.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71094542E12, 26354.4], [1.71094536E12, 8038.0], [1.71094554E12, 28775.0], [1.71094548E12, 23191.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71094542E12, 29577.0], [1.71094536E12, 8038.0], [1.71094554E12, 29339.4], [1.71094548E12, 28334.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71094542E12, 28683.0], [1.71094536E12, 8038.0], [1.71094554E12, 28918.25], [1.71094548E12, 24727.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71094542E12, 580.0], [1.71094536E12, 808.0], [1.71094554E12, 594.0], [1.71094548E12, 546.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71094542E12, 1912.0], [1.71094536E12, 1218.0], [1.71094554E12, 15369.5], [1.71094548E12, 2736.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094554E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 916.0, "minX": 1.0, "maxY": 55251.0, "series": [{"data": [[2.0, 952.0], [8.0, 28626.0], [9.0, 17792.5], [10.0, 19933.0], [11.0, 15410.0], [3.0, 1401.0], [13.0, 916.0], [1.0, 4237.0], [4.0, 3431.0], [5.0, 9468.0], [22.0, 15460.0], [6.0, 3158.0], [25.0, 28713.0], [7.0, 27319.0], [28.0, 10396.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 42922.0], [8.0, 50199.0], [9.0, 49975.0], [10.0, 52168.0], [11.0, 50263.5], [3.0, 38482.0], [12.0, 44569.0], [13.0, 49741.5], [14.0, 52945.5], [1.0, 42017.5], [4.0, 42184.0], [16.0, 50167.5], [18.0, 54576.5], [5.0, 47202.0], [21.0, 51226.0], [6.0, 43236.5], [30.0, 55251.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 916.0, "minX": 1.0, "maxY": 55251.0, "series": [{"data": [[2.0, 952.0], [8.0, 28622.5], [9.0, 17792.5], [10.0, 19920.0], [11.0, 15410.0], [3.0, 1401.0], [13.0, 916.0], [1.0, 4231.0], [4.0, 3430.0], [5.0, 9455.0], [22.0, 15460.0], [6.0, 3158.0], [25.0, 28713.0], [7.0, 27319.0], [28.0, 10382.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 42922.0], [8.0, 50198.5], [9.0, 49975.0], [10.0, 52168.0], [11.0, 50263.5], [3.0, 38482.0], [12.0, 44568.5], [13.0, 49741.5], [14.0, 52945.5], [1.0, 42017.5], [4.0, 42184.0], [16.0, 50167.5], [18.0, 54576.0], [5.0, 47202.0], [21.0, 51226.0], [6.0, 43236.5], [30.0, 55251.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 30.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.71094536E12, "maxY": 3.4833333333333334, "series": [{"data": [[1.71094542E12, 2.75], [1.71094536E12, 3.4833333333333334], [1.71094554E12, 1.5833333333333333], [1.71094548E12, 2.183333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094554E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71094536E12, "maxY": 2.4, "series": [{"data": [[1.71094542E12, 1.0166666666666666], [1.71094536E12, 0.15], [1.71094554E12, 2.4], [1.71094548E12, 1.3]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71094542E12, 1.7333333333333334], [1.71094536E12, 1.6666666666666667], [1.71094548E12, 1.7333333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71094554E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.71094536E12, "maxY": 1.7333333333333334, "series": [{"data": [[1.71094542E12, 0.23333333333333334], [1.71094536E12, 0.05], [1.71094554E12, 0.8], [1.71094548E12, 0.5166666666666667]], "isOverall": false, "label": "HTTP Request - Filter-success", "isController": false}, {"data": [[1.71094542E12, 1.7333333333333334]], "isOverall": false, "label": "HTTP Request - Filter-failure", "isController": false}, {"data": [[1.71094536E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request - Resize-failure", "isController": false}, {"data": [[1.71094542E12, 0.4], [1.71094536E12, 0.05], [1.71094554E12, 0.8166666666666667], [1.71094548E12, 0.3333333333333333]], "isOverall": false, "label": "HTTP Request - Composite-success", "isController": false}, {"data": [[1.71094548E12, 1.7333333333333334]], "isOverall": false, "label": "HTTP Request - Composite-failure", "isController": false}, {"data": [[1.71094542E12, 0.38333333333333336], [1.71094536E12, 0.05], [1.71094554E12, 0.7833333333333333], [1.71094548E12, 0.45]], "isOverall": false, "label": "HTTP Request - Resize-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094554E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71094536E12, "maxY": 2.4, "series": [{"data": [[1.71094542E12, 1.0166666666666666], [1.71094536E12, 0.15], [1.71094554E12, 2.4], [1.71094548E12, 1.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71094542E12, 1.7333333333333334], [1.71094536E12, 1.6666666666666667], [1.71094548E12, 1.7333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71094554E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

